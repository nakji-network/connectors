// Code generated by MockGen. DO NOT EDIT.
// Source: blep.ai/data/connectors/source/bitcoin (interfaces: BTCClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	btcjson "github.com/btcsuite/btcd/btcjson"
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	wire "github.com/btcsuite/btcd/wire"
	gomock "github.com/golang/mock/gomock"
)

// MockBTCClient is a mock of BTCClient interface.
type MockBTCClient struct {
	ctrl     *gomock.Controller
	recorder *MockBTCClientMockRecorder
}

// MockBTCClientMockRecorder is the mock recorder for MockBTCClient.
type MockBTCClientMockRecorder struct {
	mock *MockBTCClient
}

// NewMockBTCClient creates a new mock instance.
func NewMockBTCClient(ctrl *gomock.Controller) *MockBTCClient {
	mock := &MockBTCClient{ctrl: ctrl}
	mock.recorder = &MockBTCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBTCClient) EXPECT() *MockBTCClientMockRecorder {
	return m.recorder
}

// GetBlock mocks base method.
func (m *MockBTCClient) GetBlock(arg0 *chainhash.Hash) (*wire.MsgBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0)
	ret0, _ := ret[0].(*wire.MsgBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBTCClientMockRecorder) GetBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBTCClient)(nil).GetBlock), arg0)
}

// GetBlockVerbose mocks base method.
func (m *MockBTCClient) GetBlockVerbose(arg0 *chainhash.Hash) (*btcjson.GetBlockVerboseResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockVerbose", arg0)
	ret0, _ := ret[0].(*btcjson.GetBlockVerboseResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockVerbose indicates an expected call of GetBlockVerbose.
func (mr *MockBTCClientMockRecorder) GetBlockVerbose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockVerbose", reflect.TypeOf((*MockBTCClient)(nil).GetBlockVerbose), arg0)
}

// GetRawTransactionVerbose mocks base method.
func (m *MockBTCClient) GetRawTransactionVerbose(arg0 *chainhash.Hash) (*btcjson.TxRawResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransactionVerbose", arg0)
	ret0, _ := ret[0].(*btcjson.TxRawResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionVerbose indicates an expected call of GetRawTransactionVerbose.
func (mr *MockBTCClientMockRecorder) GetRawTransactionVerbose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionVerbose", reflect.TypeOf((*MockBTCClient)(nil).GetRawTransactionVerbose), arg0)
}

// Shutdown mocks base method.
func (m *MockBTCClient) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockBTCClientMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBTCClient)(nil).Shutdown))
}

// WaitForShutdown mocks base method.
func (m *MockBTCClient) WaitForShutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForShutdown")
}

// WaitForShutdown indicates an expected call of WaitForShutdown.
func (mr *MockBTCClientMockRecorder) WaitForShutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForShutdown", reflect.TypeOf((*MockBTCClient)(nil).WaitForShutdown))
}
