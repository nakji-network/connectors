// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: connectors/source/solana/solana.proto

package solana

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// https://pkg.go.dev/github.com/gagliardetto/solana-go/rpc@v1.0.0#RewardType
type BlockReward_RewardType int32

const (
	BlockReward_FEE     BlockReward_RewardType = 0
	BlockReward_RENT    BlockReward_RewardType = 1
	BlockReward_VOTING  BlockReward_RewardType = 2
	BlockReward_STAKING BlockReward_RewardType = 3
)

// Enum value maps for BlockReward_RewardType.
var (
	BlockReward_RewardType_name = map[int32]string{
		0: "FEE",
		1: "RENT",
		2: "VOTING",
		3: "STAKING",
	}
	BlockReward_RewardType_value = map[string]int32{
		"FEE":     0,
		"RENT":    1,
		"VOTING":  2,
		"STAKING": 3,
	}
)

func (x BlockReward_RewardType) Enum() *BlockReward_RewardType {
	p := new(BlockReward_RewardType)
	*p = x
	return p
}

func (x BlockReward_RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockReward_RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_connectors_source_solana_solana_proto_enumTypes[0].Descriptor()
}

func (BlockReward_RewardType) Type() protoreflect.EnumType {
	return &file_connectors_source_solana_solana_proto_enumTypes[0]
}

func (x BlockReward_RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockReward_RewardType.Descriptor instead.
func (BlockReward_RewardType) EnumDescriptor() ([]byte, []int) {
	return file_connectors_source_solana_solana_proto_rawDescGZIP(), []int{7, 0}
}

// https://pkg.go.dev/github.com/gagliardetto/solana-go/rpc@v1.0.0#GetBlockResult
// has many rewards
// has many transactions
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash              string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousBlockhash string   `protobuf:"bytes,2,opt,name=previousBlockhash,proto3" json:"previousBlockhash,omitempty"`
	ParentSlot        uint64   `protobuf:"varint,3,opt,name=parentSlot,proto3" json:"parentSlot,omitempty"`
	Signatures        []string `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
	BlockTime         int64    `protobuf:"varint,5,opt,name=blockTime,proto3" json:"blockTime,omitempty"`
	BlockHeight       uint64   `protobuf:"varint,6,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solana_solana_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solana_solana_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_connectors_source_solana_solana_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Block) GetPreviousBlockhash() string {
	if x != nil {
		return x.PreviousBlockhash
	}
	return ""
}

func (x *Block) GetParentSlot() uint64 {
	if x != nil {
		return x.ParentSlot
	}
	return 0
}

func (x *Block) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *Block) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *Block) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

// https://pkg.go.dev/github.com/gagliardetto/solana-go/rpc@v1.0.0#TransactionWithMeta
// https://pkg.go.dev/github.com/gagliardetto/solana-go/rpc@v1.0.0#TransactionMeta
// https://pkg.go.dev/github.com/gagliardetto/solana-go@v1.0.0#Transaction
// has many blockRewards
// belongs to block
// has one message
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionMeta fields
	BlockHash         string          `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	Err               string          `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Fee               uint64          `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	PreBalances       []uint64        `protobuf:"varint,4,rep,packed,name=preBalances,proto3" json:"preBalances,omitempty"`
	PostBalances      []uint64        `protobuf:"varint,5,rep,packed,name=postBalances,proto3" json:"postBalances,omitempty"`
	PreTokenBalances  []*TokenBalance `protobuf:"bytes,7,rep,name=preTokenBalances,proto3" json:"preTokenBalances,omitempty"`
	PostTokenBalances []*TokenBalance `protobuf:"bytes,8,rep,name=postTokenBalances,proto3" json:"postTokenBalances,omitempty"`
	LogMessages       []string        `protobuf:"bytes,9,rep,name=logMessages,proto3" json:"logMessages,omitempty"`
	// Transaction fields
	Signatures []string `protobuf:"bytes,11,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Id         string   `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solana_solana_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solana_solana_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_connectors_source_solana_solana_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Transaction) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *Transaction) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Transaction) GetPreBalances() []uint64 {
	if x != nil {
		return x.PreBalances
	}
	return nil
}

func (x *Transaction) GetPostBalances() []uint64 {
	if x != nil {
		return x.PostBalances
	}
	return nil
}

func (x *Transaction) GetPreTokenBalances() []*TokenBalance {
	if x != nil {
		return x.PreTokenBalances
	}
	return nil
}

func (x *Transaction) GetPostTokenBalances() []*TokenBalance {
	if x != nil {
		return x.PostTokenBalances
	}
	return nil
}

func (x *Transaction) GetLogMessages() []string {
	if x != nil {
		return x.LogMessages
	}
	return nil
}

func (x *Transaction) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// https://pkg.go.dev/github.com/gagliardetto/solana-go@v1.0.0#Message
// has many compiledInstructions
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,7,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	// MessageHeader fields
	NumRequiredSignatures       uint32 `protobuf:"varint,1,opt,name=numRequiredSignatures,proto3" json:"numRequiredSignatures,omitempty"`
	NumReadOnlySignedAccounts   uint32 `protobuf:"varint,2,opt,name=numReadOnlySignedAccounts,proto3" json:"numReadOnlySignedAccounts,omitempty"`
	NumReadOnlyUnsignedAccounts uint32 `protobuf:"varint,3,opt,name=numReadOnlyUnsignedAccounts,proto3" json:"numReadOnlyUnsignedAccounts,omitempty"`
	// Message fields
	AccountKeys     []string               `protobuf:"bytes,4,rep,name=accountKeys,proto3" json:"accountKeys,omitempty"`
	RecentBlockHash string                 `protobuf:"bytes,5,opt,name=recentBlockHash,proto3" json:"recentBlockHash,omitempty"`
	Instructions    []*CompiledInstruction `protobuf:"bytes,6,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solana_solana_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solana_solana_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_connectors_source_solana_solana_proto_rawDescGZIP(), []int{2}
}

func (x *Message) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Message) GetNumRequiredSignatures() uint32 {
	if x != nil {
		return x.NumRequiredSignatures
	}
	return 0
}

func (x *Message) GetNumReadOnlySignedAccounts() uint32 {
	if x != nil {
		return x.NumReadOnlySignedAccounts
	}
	return 0
}

func (x *Message) GetNumReadOnlyUnsignedAccounts() uint32 {
	if x != nil {
		return x.NumReadOnlyUnsignedAccounts
	}
	return 0
}

func (x *Message) GetAccountKeys() []string {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

func (x *Message) GetRecentBlockHash() string {
	if x != nil {
		return x.RecentBlockHash
	}
	return ""
}

func (x *Message) GetInstructions() []*CompiledInstruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

// https://pkg.go.dev/github.com/gagliardetto/solana-go@v1.0.0#CompiledInstruction
type CompiledInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramIdIndex uint32   `protobuf:"varint,1,opt,name=programIdIndex,proto3" json:"programIdIndex,omitempty"`
	AccountCount   uint32   `protobuf:"varint,2,opt,name=accountCount,proto3" json:"accountCount,omitempty"`
	DataLength     uint32   `protobuf:"varint,3,opt,name=dataLength,proto3" json:"dataLength,omitempty"`
	Accounts       []uint32 `protobuf:"varint,4,rep,packed,name=accounts,proto3" json:"accounts,omitempty"`
	Data           string   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CompiledInstruction) Reset() {
	*x = CompiledInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solana_solana_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledInstruction) ProtoMessage() {}

func (x *CompiledInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solana_solana_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledInstruction.ProtoReflect.Descriptor instead.
func (*CompiledInstruction) Descriptor() ([]byte, []int) {
	return file_connectors_source_solana_solana_proto_rawDescGZIP(), []int{3}
}

func (x *CompiledInstruction) GetProgramIdIndex() uint32 {
	if x != nil {
		return x.ProgramIdIndex
	}
	return 0
}

func (x *CompiledInstruction) GetAccountCount() uint32 {
	if x != nil {
		return x.AccountCount
	}
	return 0
}

func (x *CompiledInstruction) GetDataLength() uint32 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *CompiledInstruction) GetAccounts() []uint32 {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *CompiledInstruction) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// https://pkg.go.dev/github.com/gagliardetto/solana-go/rpc@v1.0.0#TokenBalance
type TokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIndex  uint32         `protobuf:"varint,1,opt,name=accountIndex,proto3" json:"accountIndex,omitempty"`
	Mint          string         `protobuf:"bytes,2,opt,name=mint,proto3" json:"mint,omitempty"`
	UiTokenAmount *UiTokenAmount `protobuf:"bytes,3,opt,name=uiTokenAmount,proto3" json:"uiTokenAmount,omitempty"`
}

func (x *TokenBalance) Reset() {
	*x = TokenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solana_solana_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalance) ProtoMessage() {}

func (x *TokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solana_solana_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalance.ProtoReflect.Descriptor instead.
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return file_connectors_source_solana_solana_proto_rawDescGZIP(), []int{4}
}

func (x *TokenBalance) GetAccountIndex() uint32 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *TokenBalance) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *TokenBalance) GetUiTokenAmount() *UiTokenAmount {
	if x != nil {
		return x.UiTokenAmount
	}
	return nil
}

// https://pkg.go.dev/github.com/gagliardetto/solana-go/rpc@v1.0.0#UiTokenAmount
type UiTokenAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Decimals uint32 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"`
	UiAmount string `protobuf:"bytes,3,opt,name=uiAmount,proto3" json:"uiAmount,omitempty"`
}

func (x *UiTokenAmount) Reset() {
	*x = UiTokenAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solana_solana_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiTokenAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiTokenAmount) ProtoMessage() {}

func (x *UiTokenAmount) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solana_solana_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiTokenAmount.ProtoReflect.Descriptor instead.
func (*UiTokenAmount) Descriptor() ([]byte, []int) {
	return file_connectors_source_solana_solana_proto_rawDescGZIP(), []int{5}
}

func (x *UiTokenAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UiTokenAmount) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *UiTokenAmount) GetUiAmount() string {
	if x != nil {
		return x.UiAmount
	}
	return ""
}

// https://pkg.go.dev/github.com/gagliardetto/solana-go@v1.0.0/rpc#Account
// has many rewards
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey    string  `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"` // primary key
	Lamports     uint64  `protobuf:"varint,2,opt,name=lamports,proto3" json:"lamports,omitempty"`
	Owner        *string `protobuf:"bytes,3,opt,name=owner,proto3,oneof" json:"owner,omitempty"` // foreign key referencing a program. a program is an account which contains static, executable code
	Executable   bool    `protobuf:"varint,4,opt,name=executable,proto3" json:"executable,omitempty"`
	RentEpoch    uint64  `protobuf:"varint,5,opt,name=rentEpoch,proto3" json:"rentEpoch,omitempty"`
	DataJson     []byte  `protobuf:"bytes,6,opt,name=dataJson,proto3,oneof" json:"dataJson,omitempty"`
	DataBytes    []byte  `protobuf:"bytes,7,opt,name=dataBytes,proto3,oneof" json:"dataBytes,omitempty"`
	DataEncoding string  `protobuf:"bytes,8,opt,name=dataEncoding,proto3" json:"dataEncoding,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solana_solana_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solana_solana_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_connectors_source_solana_solana_proto_rawDescGZIP(), []int{6}
}

func (x *Account) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Account) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

func (x *Account) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *Account) GetExecutable() bool {
	if x != nil {
		return x.Executable
	}
	return false
}

func (x *Account) GetRentEpoch() uint64 {
	if x != nil {
		return x.RentEpoch
	}
	return 0
}

func (x *Account) GetDataJson() []byte {
	if x != nil {
		return x.DataJson
	}
	return nil
}

func (x *Account) GetDataBytes() []byte {
	if x != nil {
		return x.DataBytes
	}
	return nil
}

func (x *Account) GetDataEncoding() string {
	if x != nil {
		return x.DataEncoding
	}
	return ""
}

// https://pkg.go.dev/github.com/gagliardetto/solana-go/rpc@v1.0.0#`BlockReward`
// belongs to account
type BlockReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash     string                 `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"` // foreign key referencing a block
	Pubkey        string                 `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`       // foreign key referencing an account
	Lamports      int64                  `protobuf:"varint,3,opt,name=lamports,proto3" json:"lamports,omitempty"`
	PostBalance   uint64                 `protobuf:"varint,4,opt,name=postBalance,proto3" json:"postBalance,omitempty"`
	RewardType    BlockReward_RewardType `protobuf:"varint,5,opt,name=rewardType,proto3,enum=solana.BlockReward_RewardType" json:"rewardType,omitempty"`
	TransactionId string                 `protobuf:"bytes,6,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *BlockReward) Reset() {
	*x = BlockReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solana_solana_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockReward) ProtoMessage() {}

func (x *BlockReward) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solana_solana_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockReward.ProtoReflect.Descriptor instead.
func (*BlockReward) Descriptor() ([]byte, []int) {
	return file_connectors_source_solana_solana_proto_rawDescGZIP(), []int{7}
}

func (x *BlockReward) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BlockReward) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *BlockReward) GetLamports() int64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

func (x *BlockReward) GetPostBalance() uint64 {
	if x != nil {
		return x.PostBalance
	}
	return 0
}

func (x *BlockReward) GetRewardType() BlockReward_RewardType {
	if x != nil {
		return x.RewardType
	}
	return BlockReward_FEE
}

func (x *BlockReward) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type Solana struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// Types that are assignable to Msg:
	//	*Solana_Block
	//	*Solana_Account
	//	*Solana_BlockReward
	//	*Solana_Transaction
	//	*Solana_Message
	Msg isSolana_Msg `protobuf_oneof:"msg"`
}

func (x *Solana) Reset() {
	*x = Solana{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solana_solana_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Solana) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solana) ProtoMessage() {}

func (x *Solana) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solana_solana_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Solana.ProtoReflect.Descriptor instead.
func (*Solana) Descriptor() ([]byte, []int) {
	return file_connectors_source_solana_solana_proto_rawDescGZIP(), []int{8}
}

func (x *Solana) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (m *Solana) GetMsg() isSolana_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *Solana) GetBlock() *Block {
	if x, ok := x.GetMsg().(*Solana_Block); ok {
		return x.Block
	}
	return nil
}

func (x *Solana) GetAccount() *Account {
	if x, ok := x.GetMsg().(*Solana_Account); ok {
		return x.Account
	}
	return nil
}

func (x *Solana) GetBlockReward() *BlockReward {
	if x, ok := x.GetMsg().(*Solana_BlockReward); ok {
		return x.BlockReward
	}
	return nil
}

func (x *Solana) GetTransaction() *Transaction {
	if x, ok := x.GetMsg().(*Solana_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (x *Solana) GetMessage() *Message {
	if x, ok := x.GetMsg().(*Solana_Message); ok {
		return x.Message
	}
	return nil
}

type isSolana_Msg interface {
	isSolana_Msg()
}

type Solana_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}

type Solana_Account struct {
	Account *Account `protobuf:"bytes,3,opt,name=account,proto3,oneof"`
}

type Solana_BlockReward struct {
	BlockReward *BlockReward `protobuf:"bytes,4,opt,name=blockReward,proto3,oneof"`
}

type Solana_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,5,opt,name=transaction,proto3,oneof"`
}

type Solana_Message struct {
	Message *Message `protobuf:"bytes,6,opt,name=message,proto3,oneof"`
}

func (*Solana_Block) isSolana_Msg() {}

func (*Solana_Account) isSolana_Msg() {}

func (*Solana_BlockReward) isSolana_Msg() {}

func (*Solana_Transaction) isSolana_Msg() {}

func (*Solana_Message) isSolana_Msg() {}

var File_connectors_source_solana_solana_proto protoreflect.FileDescriptor

var file_connectors_source_solana_solana_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x22,
	0xc9, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xed, 0x02, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf2, 0x02, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x40, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x3f, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xb1, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x49, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x0d, 0x75, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x55, 0x69,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x75, 0x69, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x0d, 0x55, 0x69,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x07,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x38, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x45, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x98, 0x02, 0x0a, 0x06,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x37, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x42, 0x27, 0x5a, 0x25, 0x62, 0x6c, 0x65, 0x70, 0x2e, 0x61,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connectors_source_solana_solana_proto_rawDescOnce sync.Once
	file_connectors_source_solana_solana_proto_rawDescData = file_connectors_source_solana_solana_proto_rawDesc
)

func file_connectors_source_solana_solana_proto_rawDescGZIP() []byte {
	file_connectors_source_solana_solana_proto_rawDescOnce.Do(func() {
		file_connectors_source_solana_solana_proto_rawDescData = protoimpl.X.CompressGZIP(file_connectors_source_solana_solana_proto_rawDescData)
	})
	return file_connectors_source_solana_solana_proto_rawDescData
}

var file_connectors_source_solana_solana_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_connectors_source_solana_solana_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_connectors_source_solana_solana_proto_goTypes = []interface{}{
	(BlockReward_RewardType)(0), // 0: solana.BlockReward.RewardType
	(*Block)(nil),               // 1: solana.Block
	(*Transaction)(nil),         // 2: solana.Transaction
	(*Message)(nil),             // 3: solana.Message
	(*CompiledInstruction)(nil), // 4: solana.CompiledInstruction
	(*TokenBalance)(nil),        // 5: solana.TokenBalance
	(*UiTokenAmount)(nil),       // 6: solana.UiTokenAmount
	(*Account)(nil),             // 7: solana.Account
	(*BlockReward)(nil),         // 8: solana.BlockReward
	(*Solana)(nil),              // 9: solana.Solana
}
var file_connectors_source_solana_solana_proto_depIdxs = []int32{
	5,  // 0: solana.Transaction.preTokenBalances:type_name -> solana.TokenBalance
	5,  // 1: solana.Transaction.postTokenBalances:type_name -> solana.TokenBalance
	4,  // 2: solana.Message.instructions:type_name -> solana.CompiledInstruction
	6,  // 3: solana.TokenBalance.uiTokenAmount:type_name -> solana.UiTokenAmount
	0,  // 4: solana.BlockReward.rewardType:type_name -> solana.BlockReward.RewardType
	1,  // 5: solana.Solana.block:type_name -> solana.Block
	7,  // 6: solana.Solana.account:type_name -> solana.Account
	8,  // 7: solana.Solana.blockReward:type_name -> solana.BlockReward
	2,  // 8: solana.Solana.transaction:type_name -> solana.Transaction
	3,  // 9: solana.Solana.message:type_name -> solana.Message
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_connectors_source_solana_solana_proto_init() }
func file_connectors_source_solana_solana_proto_init() {
	if File_connectors_source_solana_solana_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connectors_source_solana_solana_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solana_solana_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solana_solana_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solana_solana_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompiledInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solana_solana_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solana_solana_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiTokenAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solana_solana_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solana_solana_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solana_solana_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Solana); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_connectors_source_solana_solana_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_connectors_source_solana_solana_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Solana_Block)(nil),
		(*Solana_Account)(nil),
		(*Solana_BlockReward)(nil),
		(*Solana_Transaction)(nil),
		(*Solana_Message)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connectors_source_solana_solana_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_connectors_source_solana_solana_proto_goTypes,
		DependencyIndexes: file_connectors_source_solana_solana_proto_depIdxs,
		EnumInfos:         file_connectors_source_solana_solana_proto_enumTypes,
		MessageInfos:      file_connectors_source_solana_solana_proto_msgTypes,
	}.Build()
	File_connectors_source_solana_solana_proto = out.File
	file_connectors_source_solana_solana_proto_rawDesc = nil
	file_connectors_source_solana_solana_proto_goTypes = nil
	file_connectors_source_solana_solana_proto_depIdxs = nil
}
