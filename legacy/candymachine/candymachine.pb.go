// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: connectors/source/candymachine/candymachine.proto

package candymachine

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MintNFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts                       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id                       []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // hash of the event
	TxSignature              string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	CreatorBump              uint32                 `protobuf:"varint,4,opt,name=creatorBump,proto3" json:"creatorBump,omitempty"`
	CandyMachine             string                 `protobuf:"bytes,5,opt,name=candyMachine,proto3" json:"candyMachine,omitempty"`
	CandyMachineCreator      string                 `protobuf:"bytes,6,opt,name=candyMachineCreator,proto3" json:"candyMachineCreator,omitempty"`
	Payer                    string                 `protobuf:"bytes,7,opt,name=payer,proto3" json:"payer,omitempty"`
	Wallet                   string                 `protobuf:"bytes,8,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Metadata                 string                 `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Mint                     string                 `protobuf:"bytes,10,opt,name=mint,proto3" json:"mint,omitempty"`
	MintAuthority            string                 `protobuf:"bytes,11,opt,name=mintAuthority,proto3" json:"mintAuthority,omitempty"`
	UpdateAuthority          string                 `protobuf:"bytes,12,opt,name=updateAuthority,proto3" json:"updateAuthority,omitempty"`
	MasterEdition            string                 `protobuf:"bytes,13,opt,name=masterEdition,proto3" json:"masterEdition,omitempty"`
	TokenMetadataProgram     string                 `protobuf:"bytes,14,opt,name=tokenMetadataProgram,proto3" json:"tokenMetadataProgram,omitempty"`
	TokenProgram             string                 `protobuf:"bytes,15,opt,name=tokenProgram,proto3" json:"tokenProgram,omitempty"`
	SystemProgram            string                 `protobuf:"bytes,16,opt,name=systemProgram,proto3" json:"systemProgram,omitempty"`
	Rent                     string                 `protobuf:"bytes,17,opt,name=rent,proto3" json:"rent,omitempty"`
	Clock                    string                 `protobuf:"bytes,18,opt,name=clock,proto3" json:"clock,omitempty"`
	RecentBlockhashes        string                 `protobuf:"bytes,19,opt,name=recentBlockhashes,proto3" json:"recentBlockhashes,omitempty"`
	InstructionSysvarAccount string                 `protobuf:"bytes,20,opt,name=instructionSysvarAccount,proto3" json:"instructionSysvarAccount,omitempty"`
}

func (x *MintNFT) Reset() {
	*x = MintNFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintNFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintNFT) ProtoMessage() {}

func (x *MintNFT) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintNFT.ProtoReflect.Descriptor instead.
func (*MintNFT) Descriptor() ([]byte, []int) {
	return file_connectors_source_candymachine_candymachine_proto_rawDescGZIP(), []int{0}
}

func (x *MintNFT) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *MintNFT) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MintNFT) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *MintNFT) GetCreatorBump() uint32 {
	if x != nil {
		return x.CreatorBump
	}
	return 0
}

func (x *MintNFT) GetCandyMachine() string {
	if x != nil {
		return x.CandyMachine
	}
	return ""
}

func (x *MintNFT) GetCandyMachineCreator() string {
	if x != nil {
		return x.CandyMachineCreator
	}
	return ""
}

func (x *MintNFT) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

func (x *MintNFT) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *MintNFT) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *MintNFT) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *MintNFT) GetMintAuthority() string {
	if x != nil {
		return x.MintAuthority
	}
	return ""
}

func (x *MintNFT) GetUpdateAuthority() string {
	if x != nil {
		return x.UpdateAuthority
	}
	return ""
}

func (x *MintNFT) GetMasterEdition() string {
	if x != nil {
		return x.MasterEdition
	}
	return ""
}

func (x *MintNFT) GetTokenMetadataProgram() string {
	if x != nil {
		return x.TokenMetadataProgram
	}
	return ""
}

func (x *MintNFT) GetTokenProgram() string {
	if x != nil {
		return x.TokenProgram
	}
	return ""
}

func (x *MintNFT) GetSystemProgram() string {
	if x != nil {
		return x.SystemProgram
	}
	return ""
}

func (x *MintNFT) GetRent() string {
	if x != nil {
		return x.Rent
	}
	return ""
}

func (x *MintNFT) GetClock() string {
	if x != nil {
		return x.Clock
	}
	return ""
}

func (x *MintNFT) GetRecentBlockhashes() string {
	if x != nil {
		return x.RecentBlockhashes
	}
	return ""
}

func (x *MintNFT) GetInstructionSysvarAccount() string {
	if x != nil {
		return x.InstructionSysvarAccount
	}
	return ""
}

type UpdateCandyMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id           []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // hash of the event
	TxSignature  string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	CandyMachine string                 `protobuf:"bytes,4,opt,name=candyMachine,proto3" json:"candyMachine,omitempty"`
	Authority    string                 `protobuf:"bytes,5,opt,name=authority,proto3" json:"authority,omitempty"`
	Wallet       string                 `protobuf:"bytes,6,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *UpdateCandyMachine) Reset() {
	*x = UpdateCandyMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCandyMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCandyMachine) ProtoMessage() {}

func (x *UpdateCandyMachine) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCandyMachine.ProtoReflect.Descriptor instead.
func (*UpdateCandyMachine) Descriptor() ([]byte, []int) {
	return file_connectors_source_candymachine_candymachine_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCandyMachine) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *UpdateCandyMachine) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateCandyMachine) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *UpdateCandyMachine) GetCandyMachine() string {
	if x != nil {
		return x.CandyMachine
	}
	return ""
}

func (x *UpdateCandyMachine) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *UpdateCandyMachine) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type ConfigLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *ConfigLine) Reset() {
	*x = ConfigLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigLine) ProtoMessage() {}

func (x *ConfigLine) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigLine.ProtoReflect.Descriptor instead.
func (*ConfigLine) Descriptor() ([]byte, []int) {
	return file_connectors_source_candymachine_candymachine_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigLine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigLine) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type AddConfigLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id           []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // hash of the event
	TxSignature  string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Index        uint32                 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	ConfigLines  []*ConfigLine          `protobuf:"bytes,5,rep,name=configLines,proto3" json:"configLines,omitempty"`
	CandyMachine string                 `protobuf:"bytes,6,opt,name=candyMachine,proto3" json:"candyMachine,omitempty"`
	Authority    string                 `protobuf:"bytes,7,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (x *AddConfigLines) Reset() {
	*x = AddConfigLines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddConfigLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddConfigLines) ProtoMessage() {}

func (x *AddConfigLines) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddConfigLines.ProtoReflect.Descriptor instead.
func (*AddConfigLines) Descriptor() ([]byte, []int) {
	return file_connectors_source_candymachine_candymachine_proto_rawDescGZIP(), []int{3}
}

func (x *AddConfigLines) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *AddConfigLines) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddConfigLines) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *AddConfigLines) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AddConfigLines) GetConfigLines() []*ConfigLine {
	if x != nil {
		return x.ConfigLines
	}
	return nil
}

func (x *AddConfigLines) GetCandyMachine() string {
	if x != nil {
		return x.CandyMachine
	}
	return ""
}

func (x *AddConfigLines) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

type EndSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndSettingType uint32 `protobuf:"varint,1,opt,name=endSettingType,proto3" json:"endSettingType,omitempty"`
	Number         uint64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *EndSettings) Reset() {
	*x = EndSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSettings) ProtoMessage() {}

func (x *EndSettings) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSettings.ProtoReflect.Descriptor instead.
func (*EndSettings) Descriptor() ([]byte, []int) {
	return file_connectors_source_candymachine_candymachine_proto_rawDescGZIP(), []int{4}
}

func (x *EndSettings) GetEndSettingType() uint32 {
	if x != nil {
		return x.EndSettingType
	}
	return 0
}

func (x *EndSettings) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type HiddenSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uri  string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Hash []uint32 `protobuf:"varint,3,rep,packed,name=hash,proto3" json:"hash,omitempty"`
}

func (x *HiddenSettings) Reset() {
	*x = HiddenSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiddenSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiddenSettings) ProtoMessage() {}

func (x *HiddenSettings) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiddenSettings.ProtoReflect.Descriptor instead.
func (*HiddenSettings) Descriptor() ([]byte, []int) {
	return file_connectors_source_candymachine_candymachine_proto_rawDescGZIP(), []int{5}
}

func (x *HiddenSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HiddenSettings) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *HiddenSettings) GetHash() []uint32 {
	if x != nil {
		return x.Hash
	}
	return nil
}

type CandyMachineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                  string          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Price                 uint64          `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	Symbol                string          `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SellerFeeBasisPoints  uint32          `protobuf:"varint,4,opt,name=sellerFeeBasisPoints,proto3" json:"sellerFeeBasisPoints,omitempty"`
	MaxSupply             uint64          `protobuf:"varint,5,opt,name=maxSupply,proto3" json:"maxSupply,omitempty"`
	IsMutable             bool            `protobuf:"varint,6,opt,name=isMutable,proto3" json:"isMutable,omitempty"`
	RetainAuthority       bool            `protobuf:"varint,7,opt,name=retainAuthority,proto3" json:"retainAuthority,omitempty"`
	GoLiveDate            uint64          `protobuf:"varint,8,opt,name=goLiveDate,proto3" json:"goLiveDate,omitempty"`
	EndSettings           *EndSettings    `protobuf:"bytes,9,opt,name=endSettings,proto3" json:"endSettings,omitempty"`
	Creators              []string        `protobuf:"bytes,10,rep,name=creators,proto3" json:"creators,omitempty"`
	HiddenSettings        *HiddenSettings `protobuf:"bytes,11,opt,name=hiddenSettings,proto3" json:"hiddenSettings,omitempty"`
	WhitelistMintSettings string          `protobuf:"bytes,12,opt,name=whitelistMintSettings,proto3" json:"whitelistMintSettings,omitempty"`
	ItemsAvailable        uint64          `protobuf:"varint,13,opt,name=ItemsAvailable,proto3" json:"ItemsAvailable,omitempty"`
	GatekeeperConfig      string          `protobuf:"bytes,14,opt,name=gatekeeperConfig,proto3" json:"gatekeeperConfig,omitempty"`
}

func (x *CandyMachineData) Reset() {
	*x = CandyMachineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandyMachineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandyMachineData) ProtoMessage() {}

func (x *CandyMachineData) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandyMachineData.ProtoReflect.Descriptor instead.
func (*CandyMachineData) Descriptor() ([]byte, []int) {
	return file_connectors_source_candymachine_candymachine_proto_rawDescGZIP(), []int{6}
}

func (x *CandyMachineData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CandyMachineData) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CandyMachineData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CandyMachineData) GetSellerFeeBasisPoints() uint32 {
	if x != nil {
		return x.SellerFeeBasisPoints
	}
	return 0
}

func (x *CandyMachineData) GetMaxSupply() uint64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *CandyMachineData) GetIsMutable() bool {
	if x != nil {
		return x.IsMutable
	}
	return false
}

func (x *CandyMachineData) GetRetainAuthority() bool {
	if x != nil {
		return x.RetainAuthority
	}
	return false
}

func (x *CandyMachineData) GetGoLiveDate() uint64 {
	if x != nil {
		return x.GoLiveDate
	}
	return 0
}

func (x *CandyMachineData) GetEndSettings() *EndSettings {
	if x != nil {
		return x.EndSettings
	}
	return nil
}

func (x *CandyMachineData) GetCreators() []string {
	if x != nil {
		return x.Creators
	}
	return nil
}

func (x *CandyMachineData) GetHiddenSettings() *HiddenSettings {
	if x != nil {
		return x.HiddenSettings
	}
	return nil
}

func (x *CandyMachineData) GetWhitelistMintSettings() string {
	if x != nil {
		return x.WhitelistMintSettings
	}
	return ""
}

func (x *CandyMachineData) GetItemsAvailable() uint64 {
	if x != nil {
		return x.ItemsAvailable
	}
	return 0
}

func (x *CandyMachineData) GetGatekeeperConfig() string {
	if x != nil {
		return x.GatekeeperConfig
	}
	return ""
}

type InitializeCandyMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id            []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // hash of the event
	TxSignature   string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Data          *CandyMachineData      `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	CandyMachine  string                 `protobuf:"bytes,5,opt,name=candyMachine,proto3" json:"candyMachine,omitempty"`
	Wallet        string                 `protobuf:"bytes,6,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Authority     string                 `protobuf:"bytes,7,opt,name=authority,proto3" json:"authority,omitempty"`
	Payer         string                 `protobuf:"bytes,8,opt,name=payer,proto3" json:"payer,omitempty"`
	SystemProgram string                 `protobuf:"bytes,9,opt,name=systemProgram,proto3" json:"systemProgram,omitempty"`
	Rent          string                 `protobuf:"bytes,10,opt,name=rent,proto3" json:"rent,omitempty"`
}

func (x *InitializeCandyMachine) Reset() {
	*x = InitializeCandyMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeCandyMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeCandyMachine) ProtoMessage() {}

func (x *InitializeCandyMachine) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeCandyMachine.ProtoReflect.Descriptor instead.
func (*InitializeCandyMachine) Descriptor() ([]byte, []int) {
	return file_connectors_source_candymachine_candymachine_proto_rawDescGZIP(), []int{7}
}

func (x *InitializeCandyMachine) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *InitializeCandyMachine) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InitializeCandyMachine) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *InitializeCandyMachine) GetData() *CandyMachineData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InitializeCandyMachine) GetCandyMachine() string {
	if x != nil {
		return x.CandyMachine
	}
	return ""
}

func (x *InitializeCandyMachine) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *InitializeCandyMachine) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *InitializeCandyMachine) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

func (x *InitializeCandyMachine) GetSystemProgram() string {
	if x != nil {
		return x.SystemProgram
	}
	return ""
}

func (x *InitializeCandyMachine) GetRent() string {
	if x != nil {
		return x.Rent
	}
	return ""
}

type UpdateAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id           []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // hash of the event
	TxSignature  string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	NewAuthority string                 `protobuf:"bytes,4,opt,name=newAuthority,proto3" json:"newAuthority,omitempty"`
	CandyMachine string                 `protobuf:"bytes,5,opt,name=candyMachine,proto3" json:"candyMachine,omitempty"`
	Authority    string                 `protobuf:"bytes,6,opt,name=authority,proto3" json:"authority,omitempty"`
	Wallet       string                 `protobuf:"bytes,7,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *UpdateAuthority) Reset() {
	*x = UpdateAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuthority) ProtoMessage() {}

func (x *UpdateAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuthority.ProtoReflect.Descriptor instead.
func (*UpdateAuthority) Descriptor() ([]byte, []int) {
	return file_connectors_source_candymachine_candymachine_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAuthority) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *UpdateAuthority) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateAuthority) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *UpdateAuthority) GetNewAuthority() string {
	if x != nil {
		return x.NewAuthority
	}
	return ""
}

func (x *UpdateAuthority) GetCandyMachine() string {
	if x != nil {
		return x.CandyMachine
	}
	return ""
}

func (x *UpdateAuthority) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *UpdateAuthority) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type WithdrawFunds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id           []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // hash of the event
	TxSignature  string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	CandyMachine string                 `protobuf:"bytes,4,opt,name=candyMachine,proto3" json:"candyMachine,omitempty"`
	Authority    string                 `protobuf:"bytes,5,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (x *WithdrawFunds) Reset() {
	*x = WithdrawFunds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawFunds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawFunds) ProtoMessage() {}

func (x *WithdrawFunds) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_candymachine_candymachine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawFunds.ProtoReflect.Descriptor instead.
func (*WithdrawFunds) Descriptor() ([]byte, []int) {
	return file_connectors_source_candymachine_candymachine_proto_rawDescGZIP(), []int{9}
}

func (x *WithdrawFunds) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *WithdrawFunds) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *WithdrawFunds) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *WithdrawFunds) GetCandyMachine() string {
	if x != nil {
		return x.CandyMachine
	}
	return ""
}

func (x *WithdrawFunds) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

var File_connectors_source_candymachine_candymachine_proto protoreflect.FileDescriptor

var file_connectors_source_candymachine_candymachine_proto_rawDesc = []byte{
	0x0a, 0x31, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2f, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc5, 0x05, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x74, 0x4e, 0x46, 0x54, 0x12, 0x2a,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x75, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x75, 0x6d, 0x70, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73,
	0x76, 0x61, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73,
	0x76, 0x61, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x32, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x82, 0x02,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x6e, 0x64,
	0x79, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x69, 0x6e, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x22, 0x4d, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x4a, 0x0a, 0x0e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xb7, 0x04,
	0x0a, 0x10, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x46, 0x65, 0x65, 0x42, 0x61, 0x73,
	0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x67, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a,
	0x15, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x67,
	0x61, 0x74, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x61, 0x74, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd4, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x64,
	0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xed,
	0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x64,
	0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0xaf,
	0x01, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x2d, 0x5a, 0x2b, 0x62, 0x6c, 0x65, 0x70, 0x2e, 0x61, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connectors_source_candymachine_candymachine_proto_rawDescOnce sync.Once
	file_connectors_source_candymachine_candymachine_proto_rawDescData = file_connectors_source_candymachine_candymachine_proto_rawDesc
)

func file_connectors_source_candymachine_candymachine_proto_rawDescGZIP() []byte {
	file_connectors_source_candymachine_candymachine_proto_rawDescOnce.Do(func() {
		file_connectors_source_candymachine_candymachine_proto_rawDescData = protoimpl.X.CompressGZIP(file_connectors_source_candymachine_candymachine_proto_rawDescData)
	})
	return file_connectors_source_candymachine_candymachine_proto_rawDescData
}

var file_connectors_source_candymachine_candymachine_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_connectors_source_candymachine_candymachine_proto_goTypes = []interface{}{
	(*MintNFT)(nil),                // 0: candymachine.MintNFT
	(*UpdateCandyMachine)(nil),     // 1: candymachine.UpdateCandyMachine
	(*ConfigLine)(nil),             // 2: candymachine.ConfigLine
	(*AddConfigLines)(nil),         // 3: candymachine.AddConfigLines
	(*EndSettings)(nil),            // 4: candymachine.EndSettings
	(*HiddenSettings)(nil),         // 5: candymachine.HiddenSettings
	(*CandyMachineData)(nil),       // 6: candymachine.CandyMachineData
	(*InitializeCandyMachine)(nil), // 7: candymachine.InitializeCandyMachine
	(*UpdateAuthority)(nil),        // 8: candymachine.UpdateAuthority
	(*WithdrawFunds)(nil),          // 9: candymachine.WithdrawFunds
	(*timestamppb.Timestamp)(nil),  // 10: google.protobuf.Timestamp
}
var file_connectors_source_candymachine_candymachine_proto_depIdxs = []int32{
	10, // 0: candymachine.MintNFT.ts:type_name -> google.protobuf.Timestamp
	10, // 1: candymachine.UpdateCandyMachine.ts:type_name -> google.protobuf.Timestamp
	10, // 2: candymachine.AddConfigLines.ts:type_name -> google.protobuf.Timestamp
	2,  // 3: candymachine.AddConfigLines.configLines:type_name -> candymachine.ConfigLine
	4,  // 4: candymachine.CandyMachineData.endSettings:type_name -> candymachine.EndSettings
	5,  // 5: candymachine.CandyMachineData.hiddenSettings:type_name -> candymachine.HiddenSettings
	10, // 6: candymachine.InitializeCandyMachine.ts:type_name -> google.protobuf.Timestamp
	6,  // 7: candymachine.InitializeCandyMachine.data:type_name -> candymachine.CandyMachineData
	10, // 8: candymachine.UpdateAuthority.ts:type_name -> google.protobuf.Timestamp
	10, // 9: candymachine.WithdrawFunds.ts:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_connectors_source_candymachine_candymachine_proto_init() }
func file_connectors_source_candymachine_candymachine_proto_init() {
	if File_connectors_source_candymachine_candymachine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connectors_source_candymachine_candymachine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintNFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_candymachine_candymachine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCandyMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_candymachine_candymachine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_candymachine_candymachine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddConfigLines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_candymachine_candymachine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_candymachine_candymachine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiddenSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_candymachine_candymachine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandyMachineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_candymachine_candymachine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeCandyMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_candymachine_candymachine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_candymachine_candymachine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawFunds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connectors_source_candymachine_candymachine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_connectors_source_candymachine_candymachine_proto_goTypes,
		DependencyIndexes: file_connectors_source_candymachine_candymachine_proto_depIdxs,
		MessageInfos:      file_connectors_source_candymachine_candymachine_proto_msgTypes,
	}.Build()
	File_connectors_source_candymachine_candymachine_proto = out.File
	file_connectors_source_candymachine_candymachine_proto_rawDesc = nil
	file_connectors_source_candymachine_candymachine_proto_goTypes = nil
	file_connectors_source_candymachine_candymachine_proto_depIdxs = nil
}
