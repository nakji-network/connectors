// Code generated by connectorgen - Edit as necessary.

package main

import (
	"context"

	"cloud.google.com/go/profiler"
	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/rs/zerolog/log"
	_ "go.uber.org/automaxprocs"

	"blep.ai/data/chain/ethereum/ethclient"
	"blep.ai/data/config"
	"blep.ai/data/connectors/source/axie"
	"blep.ai/data/monitor"
	"github.com/nakji-network/connector/kafkautils"
)

var conf = config.InitConfig()

func init() {
	kafkautils.TopicTypeRegistry.Load(axie.TopicTypes)
	conf.SetDefault("axie.kafka.topic.axienft_approval", ".fct.nakji.axie.0_0_0.axienft_approval")
	conf.SetDefault("axie.kafka.topic.axienft_approvalforall", ".fct.nakji.axie.0_0_0.axienft_approvalforall")
	conf.SetDefault("axie.kafka.topic.axienft_axieevolved", ".fct.nakji.axie.0_0_0.axienft_axieevolved")
	conf.SetDefault("axie.kafka.topic.axienft_axierebirthed", ".fct.nakji.axie.0_0_0.axienft_axierebirthed")
	conf.SetDefault("axie.kafka.topic.axienft_axieretired", ".fct.nakji.axie.0_0_0.axienft_axieretired")
	conf.SetDefault("axie.kafka.topic.axienft_axiespawned", ".fct.nakji.axie.0_0_0.axienft_axiespawned")
	conf.SetDefault("axie.kafka.topic.axienft_transfer", ".fct.nakji.axie.0_0_0.axienft_transfer")
	conf.SetDefault("axie.kafka.topic.axs_approval", ".fct.nakji.axie.0_0_0.axs_approval")
	conf.SetDefault("axie.kafka.topic.axs_transfer", ".fct.nakji.axie.0_0_0.axs_transfer")
	conf.SetDefault("axie.kafka.topic.bridge_adminchanged", ".fct.nakji.axie.0_0_0.bridge_adminchanged")
	conf.SetDefault("axie.kafka.topic.bridge_adminremoved", ".fct.nakji.axie.0_0_0.bridge_adminremoved")
	conf.SetDefault("axie.kafka.topic.bridge_paused", ".fct.nakji.axie.0_0_0.bridge_paused")
	conf.SetDefault("axie.kafka.topic.bridge_proxyupdated", ".fct.nakji.axie.0_0_0.bridge_proxyupdated")
	conf.SetDefault("axie.kafka.topic.bridge_tokendeposited", ".fct.nakji.axie.0_0_0.bridge_tokendeposited")
	conf.SetDefault("axie.kafka.topic.bridge_tokenwithdrew", ".fct.nakji.axie.0_0_0.bridge_tokenwithdrew")
	conf.SetDefault("axie.kafka.topic.bridge_unpaused", ".fct.nakji.axie.0_0_0.bridge_unpaused")
	conf.SetDefault("axie.kafka.topic.slp_adminchanged", ".fct.nakji.axie.0_0_0.slp_adminchanged")
	conf.SetDefault("axie.kafka.topic.slp_adminremoved", ".fct.nakji.axie.0_0_0.slp_adminremoved")
	conf.SetDefault("axie.kafka.topic.slp_approval", ".fct.nakji.axie.0_0_0.slp_approval")
	conf.SetDefault("axie.kafka.topic.slp_minteradded", ".fct.nakji.axie.0_0_0.slp_minteradded")
	conf.SetDefault("axie.kafka.topic.slp_minterremoved", ".fct.nakji.axie.0_0_0.slp_minterremoved")
	conf.SetDefault("axie.kafka.topic.slp_transfer", ".fct.nakji.axie.0_0_0.slp_transfer")

	conf.SetDefault("axie.kafka.txID", "axie")

	conf.SetDefault("axie.axienftAddress", "0xF5b0A3eFB8e8E4c201e2A935F110eAaF3FFEcb8d")
	conf.SetDefault("axie.axsAddress", "0xbb0e17ef65f82ab018d8edd776e8dd940327b28b")
	conf.SetDefault("axie.bridgeAddress", "0x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2")
	conf.SetDefault("axie.slpAddress", "0xCC8Fa225D80b9c7D42F96e9570156c65D6cAAa25")
}

func main() {
	cfg := profiler.Config{
		Service:        "axie",
		ServiceVersion: "0.0.0",
		// ProjectID must be set if not running on GCP.
		//ProjectID: "my-project",

		// For OpenCensus users:
		// To see Profiler agent spans in APM backend,
		// set EnableOCTelemetry to true
		// EnableOCTelemetry: true,
	}

	// Profiler initialization, best done as early as possible.
	if err := profiler.Start(cfg); err != nil {
		log.Fatal().Err(err).Msg("failed to start GCP profiler")
	}

	kp, err := kafkautils.NewProducer(conf.GetString("kafka.url"), conf.GetString("axie.kafka.txID"))
	if err != nil {
		log.Fatal().Err(err).Msg("Failed to create new kafka producer")
	}

	urls := conf.GetStringSlice("ethereum.rpc")
	log.Info().Strs("url", urls).Msg("connecting to Ethereum RPC")
	ethClientPool, err := ethclient.DialPoolContext(context.Background(), urls)
	if err != nil {
		log.Fatal().Err(err).Msg("Ethereum RPC connection error")
	}

	axienftAddress := ethcommon.HexToAddress(conf.GetString("axie.axienftAddress"))
	axsAddress := ethcommon.HexToAddress(conf.GetString("axie.axsAddress"))
	bridgeAddress := ethcommon.HexToAddress(conf.GetString("axie.bridgeAddress"))
	slpAddress := ethcommon.HexToAddress(conf.GetString("axie.slpAddress"))

	addresses := map[string][]ethcommon.Address{
		"axienft": {axienftAddress},
		"axs":     {axsAddress},
		"bridge":  {bridgeAddress},
		"slp":     {slpAddress},
	}

	topics := map[string]kafkautils.Topic{
		"axienft_approval":       kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.axienft_approval"), conf.GetString("kafka.env")),
		"axienft_approvalforall": kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.axienft_approvalforall"), conf.GetString("kafka.env")),
		"axienft_axieevolved":    kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.axienft_axieevolved"), conf.GetString("kafka.env")),
		"axienft_axierebirthed":  kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.axienft_axierebirthed"), conf.GetString("kafka.env")),
		"axienft_axieretired":    kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.axienft_axieretired"), conf.GetString("kafka.env")),
		"axienft_axiespawned":    kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.axienft_axiespawned"), conf.GetString("kafka.env")),
		"axienft_transfer":       kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.axienft_transfer"), conf.GetString("kafka.env")),
		"axs_approval":           kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.axs_approval"), conf.GetString("kafka.env")),
		"axs_transfer":           kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.axs_transfer"), conf.GetString("kafka.env")),
		"bridge_adminchanged":    kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.bridge_adminchanged"), conf.GetString("kafka.env")),
		"bridge_adminremoved":    kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.bridge_adminremoved"), conf.GetString("kafka.env")),
		"bridge_paused":          kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.bridge_paused"), conf.GetString("kafka.env")),
		"bridge_proxyupdated":    kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.bridge_proxyupdated"), conf.GetString("kafka.env")),
		"bridge_tokendeposited":  kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.bridge_tokendeposited"), conf.GetString("kafka.env")),
		"bridge_tokenwithdrew":   kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.bridge_tokenwithdrew"), conf.GetString("kafka.env")),
		"bridge_unpaused":        kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.bridge_unpaused"), conf.GetString("kafka.env")),
		"slp_adminchanged":       kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.slp_adminchanged"), conf.GetString("kafka.env")),
		"slp_adminremoved":       kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.slp_adminremoved"), conf.GetString("kafka.env")),
		"slp_approval":           kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.slp_approval"), conf.GetString("kafka.env")),
		"slp_minteradded":        kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.slp_minteradded"), conf.GetString("kafka.env")),
		"slp_minterremoved":      kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.slp_minterremoved"), conf.GetString("kafka.env")),
		"slp_transfer":           kafkautils.MustParseTopic(conf.GetString("axie.kafka.topic.slp_transfer"), conf.GetString("kafka.env")),
	}

	connector := axie.NewConnector(
		kp,
		addresses,
		topics,
		ethClientPool,
	)

	monitor.StartMonitor("axie")
	connector.Start(context.Background(), conf.GetUint64("axie.backfillNumBlocks"))
}
