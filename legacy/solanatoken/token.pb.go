// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: connectors/source/solanatoken/token.proto

package solanatoken

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // hash of the event
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Amount      uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Mint        string                 `protobuf:"bytes,5,opt,name=mint,proto3" json:"mint,omitempty"`
	Destination string                 `protobuf:"bytes,6,opt,name=destination,proto3" json:"destination,omitempty"`
	Source      string                 `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	Owner       string                 `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	Signers     []string               `protobuf:"bytes,9,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Transfer) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Transfer) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *Transfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transfer) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *Transfer) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Transfer) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Transfer) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Transfer) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type InitializeMint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id              []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature     string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Decimals        uint32                 `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	MintAuthority   string                 `protobuf:"bytes,5,opt,name=mintAuthority,proto3" json:"mintAuthority,omitempty"`
	FreezeAuthority string                 `protobuf:"bytes,6,opt,name=freezeAuthority,proto3" json:"freezeAuthority,omitempty"`
	Mint            string                 `protobuf:"bytes,7,opt,name=mint,proto3" json:"mint,omitempty"`
	RentSysVar      string                 `protobuf:"bytes,8,opt,name=rentSysVar,proto3" json:"rentSysVar,omitempty"`
}

func (x *InitializeMint) Reset() {
	*x = InitializeMint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeMint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeMint) ProtoMessage() {}

func (x *InitializeMint) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeMint.ProtoReflect.Descriptor instead.
func (*InitializeMint) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{1}
}

func (x *InitializeMint) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *InitializeMint) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InitializeMint) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *InitializeMint) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *InitializeMint) GetMintAuthority() string {
	if x != nil {
		return x.MintAuthority
	}
	return ""
}

func (x *InitializeMint) GetFreezeAuthority() string {
	if x != nil {
		return x.FreezeAuthority
	}
	return ""
}

func (x *InitializeMint) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *InitializeMint) GetRentSysVar() string {
	if x != nil {
		return x.RentSysVar
	}
	return ""
}

type InitializeAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Account     string                 `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Mint        string                 `protobuf:"bytes,5,opt,name=mint,proto3" json:"mint,omitempty"`
	Owner       string                 `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	RentsysVar  string                 `protobuf:"bytes,7,opt,name=rentsysVar,proto3" json:"rentsysVar,omitempty"`
}

func (x *InitializeAccount) Reset() {
	*x = InitializeAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeAccount) ProtoMessage() {}

func (x *InitializeAccount) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeAccount.ProtoReflect.Descriptor instead.
func (*InitializeAccount) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{2}
}

func (x *InitializeAccount) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *InitializeAccount) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InitializeAccount) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *InitializeAccount) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InitializeAccount) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *InitializeAccount) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *InitializeAccount) GetRentsysVar() string {
	if x != nil {
		return x.RentsysVar
	}
	return ""
}

type MintTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id            []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature   string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Amount        uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Destination   string                 `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	Mint          string                 `protobuf:"bytes,6,opt,name=mint,proto3" json:"mint,omitempty"`
	MintAuthority string                 `protobuf:"bytes,7,opt,name=mintAuthority,proto3" json:"mintAuthority,omitempty"`
	Signers       []string               `protobuf:"bytes,8,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *MintTo) Reset() {
	*x = MintTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintTo) ProtoMessage() {}

func (x *MintTo) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintTo.ProtoReflect.Descriptor instead.
func (*MintTo) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{3}
}

func (x *MintTo) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *MintTo) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MintTo) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *MintTo) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MintTo) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *MintTo) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *MintTo) GetMintAuthority() string {
	if x != nil {
		return x.MintAuthority
	}
	return ""
}

func (x *MintTo) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type SetAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id            []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature   string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	AuthorityType string                 `protobuf:"bytes,4,opt,name=authorityType,proto3" json:"authorityType,omitempty"` // TODO: Replace with Enum?
	Account       string                 `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`             // mint or token account to change the authority of
	NewAuthority  string                 `protobuf:"bytes,6,opt,name=newAuthority,proto3" json:"newAuthority,omitempty"`
	Authority     string                 `protobuf:"bytes,7,opt,name=authority,proto3" json:"authority,omitempty"` // the current authority to be replaced
	Signers       []string               `protobuf:"bytes,8,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *SetAuthority) Reset() {
	*x = SetAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAuthority) ProtoMessage() {}

func (x *SetAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAuthority.ProtoReflect.Descriptor instead.
func (*SetAuthority) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{4}
}

func (x *SetAuthority) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *SetAuthority) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SetAuthority) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *SetAuthority) GetAuthorityType() string {
	if x != nil {
		return x.AuthorityType
	}
	return ""
}

func (x *SetAuthority) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SetAuthority) GetNewAuthority() string {
	if x != nil {
		return x.NewAuthority
	}
	return ""
}

func (x *SetAuthority) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *SetAuthority) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type CloseAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Account     string                 `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`         // The account to close
	Destination string                 `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"` // The account the Sol of the closed account will be transferred to
	Owner       string                 `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`             // Account's owner
	Signers     []string               `protobuf:"bytes,8,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *CloseAccount) Reset() {
	*x = CloseAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAccount) ProtoMessage() {}

func (x *CloseAccount) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAccount.ProtoReflect.Descriptor instead.
func (*CloseAccount) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{5}
}

func (x *CloseAccount) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *CloseAccount) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CloseAccount) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *CloseAccount) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CloseAccount) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *CloseAccount) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *CloseAccount) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type Burn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Amount      uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Source      string                 `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Mint        string                 `protobuf:"bytes,6,opt,name=mint,proto3" json:"mint,omitempty"`
	Owner       string                 `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	Signers     []string               `protobuf:"bytes,8,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *Burn) Reset() {
	*x = Burn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Burn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Burn) ProtoMessage() {}

func (x *Burn) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Burn.ProtoReflect.Descriptor instead.
func (*Burn) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{6}
}

func (x *Burn) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Burn) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Burn) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *Burn) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Burn) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Burn) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *Burn) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Burn) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type Approve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Amount      uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Source      string                 `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Delegate    string                 `protobuf:"bytes,6,opt,name=delegate,proto3" json:"delegate,omitempty"` // A delegate is given the authority over tokens on behalf of the source account's owner.
	Owner       string                 `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`       // The source account owner
	Signers     []string               `protobuf:"bytes,8,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *Approve) Reset() {
	*x = Approve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Approve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Approve) ProtoMessage() {}

func (x *Approve) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Approve.ProtoReflect.Descriptor instead.
func (*Approve) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{7}
}

func (x *Approve) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Approve) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Approve) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *Approve) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Approve) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Approve) GetDelegate() string {
	if x != nil {
		return x.Delegate
	}
	return ""
}

func (x *Approve) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Approve) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type Revoke struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Source      string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Owner       string                 `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Signers     []string               `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *Revoke) Reset() {
	*x = Revoke{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Revoke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Revoke) ProtoMessage() {}

func (x *Revoke) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Revoke.ProtoReflect.Descriptor instead.
func (*Revoke) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{8}
}

func (x *Revoke) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Revoke) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Revoke) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *Revoke) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Revoke) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Revoke) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type FreezeAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Account     string                 `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"` // the account to freeze
	Mint        string                 `protobuf:"bytes,5,opt,name=mint,proto3" json:"mint,omitempty"`
	Authority   string                 `protobuf:"bytes,6,opt,name=authority,proto3" json:"authority,omitempty"` // the mint freeze authority
	Signers     []string               `protobuf:"bytes,7,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *FreezeAccount) Reset() {
	*x = FreezeAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreezeAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeAccount) ProtoMessage() {}

func (x *FreezeAccount) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeAccount.ProtoReflect.Descriptor instead.
func (*FreezeAccount) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{9}
}

func (x *FreezeAccount) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *FreezeAccount) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FreezeAccount) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *FreezeAccount) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *FreezeAccount) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *FreezeAccount) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *FreezeAccount) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type InitializeMultisig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	M           uint32                 `protobuf:"varint,4,opt,name=m,proto3" json:"m,omitempty"`            // no of signers required to validate this multisig account
	Account     string                 `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"` // multisignature account to initialize
	RentSysVar  string                 `protobuf:"bytes,6,opt,name=rentSysVar,proto3" json:"rentSysVar,omitempty"`
	Signers     []string               `protobuf:"bytes,7,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *InitializeMultisig) Reset() {
	*x = InitializeMultisig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeMultisig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeMultisig) ProtoMessage() {}

func (x *InitializeMultisig) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeMultisig.ProtoReflect.Descriptor instead.
func (*InitializeMultisig) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{10}
}

func (x *InitializeMultisig) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *InitializeMultisig) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InitializeMultisig) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *InitializeMultisig) GetM() uint32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *InitializeMultisig) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InitializeMultisig) GetRentSysVar() string {
	if x != nil {
		return x.RentSysVar
	}
	return ""
}

func (x *InitializeMultisig) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type SyncNative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id           []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature  string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	TokenAccount string                 `protobuf:"bytes,4,opt,name=tokenAccount,proto3" json:"tokenAccount,omitempty"` // the native token account to sync with its underlying lamports
}

func (x *SyncNative) Reset() {
	*x = SyncNative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncNative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncNative) ProtoMessage() {}

func (x *SyncNative) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncNative.ProtoReflect.Descriptor instead.
func (*SyncNative) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{11}
}

func (x *SyncNative) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *SyncNative) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SyncNative) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *SyncNative) GetTokenAccount() string {
	if x != nil {
		return x.TokenAccount
	}
	return ""
}

type ThawAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Account     string                 `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"` // the account to thaw
	Mint        string                 `protobuf:"bytes,5,opt,name=mint,proto3" json:"mint,omitempty"`
	Authority   string                 `protobuf:"bytes,6,opt,name=authority,proto3" json:"authority,omitempty"`
	Signers     []string               `protobuf:"bytes,7,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *ThawAccount) Reset() {
	*x = ThawAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThawAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThawAccount) ProtoMessage() {}

func (x *ThawAccount) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThawAccount.ProtoReflect.Descriptor instead.
func (*ThawAccount) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{12}
}

func (x *ThawAccount) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *ThawAccount) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ThawAccount) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *ThawAccount) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ThawAccount) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *ThawAccount) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *ThawAccount) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type TransferChecked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Amount      uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Decimals    uint32                 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Source      string                 `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Mint        string                 `protobuf:"bytes,7,opt,name=mint,proto3" json:"mint,omitempty"`
	Destination string                 `protobuf:"bytes,8,opt,name=destination,proto3" json:"destination,omitempty"`
	Owner       string                 `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	Signers     []string               `protobuf:"bytes,10,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *TransferChecked) Reset() {
	*x = TransferChecked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferChecked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferChecked) ProtoMessage() {}

func (x *TransferChecked) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferChecked.ProtoReflect.Descriptor instead.
func (*TransferChecked) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{13}
}

func (x *TransferChecked) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *TransferChecked) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TransferChecked) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *TransferChecked) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferChecked) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TransferChecked) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TransferChecked) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *TransferChecked) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TransferChecked) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TransferChecked) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type ApproveChecked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Amount      uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Decimals    uint32                 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Source      string                 `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Mint        string                 `protobuf:"bytes,7,opt,name=mint,proto3" json:"mint,omitempty"`
	Delegate    string                 `protobuf:"bytes,8,opt,name=delegate,proto3" json:"delegate,omitempty"`
	Owner       string                 `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	Signers     []string               `protobuf:"bytes,10,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *ApproveChecked) Reset() {
	*x = ApproveChecked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveChecked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveChecked) ProtoMessage() {}

func (x *ApproveChecked) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveChecked.ProtoReflect.Descriptor instead.
func (*ApproveChecked) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{14}
}

func (x *ApproveChecked) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *ApproveChecked) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ApproveChecked) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *ApproveChecked) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ApproveChecked) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *ApproveChecked) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ApproveChecked) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *ApproveChecked) GetDelegate() string {
	if x != nil {
		return x.Delegate
	}
	return ""
}

func (x *ApproveChecked) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ApproveChecked) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type MintToChecked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Amount      uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Decimals    uint32                 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Mint        string                 `protobuf:"bytes,6,opt,name=mint,proto3" json:"mint,omitempty"`
	Destination string                 `protobuf:"bytes,7,opt,name=destination,proto3" json:"destination,omitempty"`
	Authority   string                 `protobuf:"bytes,8,opt,name=authority,proto3" json:"authority,omitempty"`
	Signers     []string               `protobuf:"bytes,9,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *MintToChecked) Reset() {
	*x = MintToChecked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintToChecked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintToChecked) ProtoMessage() {}

func (x *MintToChecked) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintToChecked.ProtoReflect.Descriptor instead.
func (*MintToChecked) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{15}
}

func (x *MintToChecked) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *MintToChecked) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MintToChecked) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *MintToChecked) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MintToChecked) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *MintToChecked) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *MintToChecked) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *MintToChecked) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *MintToChecked) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type BurnChecked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Amount      uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Decimals    uint32                 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Source      string                 `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Mint        string                 `protobuf:"bytes,7,opt,name=mint,proto3" json:"mint,omitempty"`
	Owner       string                 `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	Signers     []string               `protobuf:"bytes,9,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *BurnChecked) Reset() {
	*x = BurnChecked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnChecked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnChecked) ProtoMessage() {}

func (x *BurnChecked) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnChecked.ProtoReflect.Descriptor instead.
func (*BurnChecked) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{16}
}

func (x *BurnChecked) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *BurnChecked) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BurnChecked) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *BurnChecked) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BurnChecked) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *BurnChecked) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *BurnChecked) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *BurnChecked) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *BurnChecked) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type InitializeAccount2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Owner       string                 `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Account     string                 `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Mint        string                 `protobuf:"bytes,6,opt,name=mint,proto3" json:"mint,omitempty"`
	RentSysVar  string                 `protobuf:"bytes,7,opt,name=rentSysVar,proto3" json:"rentSysVar,omitempty"`
}

func (x *InitializeAccount2) Reset() {
	*x = InitializeAccount2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeAccount2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeAccount2) ProtoMessage() {}

func (x *InitializeAccount2) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeAccount2.ProtoReflect.Descriptor instead.
func (*InitializeAccount2) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{17}
}

func (x *InitializeAccount2) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *InitializeAccount2) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InitializeAccount2) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *InitializeAccount2) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *InitializeAccount2) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InitializeAccount2) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *InitializeAccount2) GetRentSysVar() string {
	if x != nil {
		return x.RentSysVar
	}
	return ""
}

type InitializeAccount3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Owner       string                 `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Account     string                 `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Mint        string                 `protobuf:"bytes,6,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *InitializeAccount3) Reset() {
	*x = InitializeAccount3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeAccount3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeAccount3) ProtoMessage() {}

func (x *InitializeAccount3) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeAccount3.ProtoReflect.Descriptor instead.
func (*InitializeAccount3) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{18}
}

func (x *InitializeAccount3) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *InitializeAccount3) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InitializeAccount3) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *InitializeAccount3) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *InitializeAccount3) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InitializeAccount3) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

type InitializeMint2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id              []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature     string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	Decimals        uint32                 `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	MintAuthority   string                 `protobuf:"bytes,5,opt,name=mintAuthority,proto3" json:"mintAuthority,omitempty"`
	FreezeAuthority string                 `protobuf:"bytes,6,opt,name=freezeAuthority,proto3" json:"freezeAuthority,omitempty"`
	Mint            string                 `protobuf:"bytes,7,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *InitializeMint2) Reset() {
	*x = InitializeMint2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeMint2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeMint2) ProtoMessage() {}

func (x *InitializeMint2) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeMint2.ProtoReflect.Descriptor instead.
func (*InitializeMint2) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{19}
}

func (x *InitializeMint2) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *InitializeMint2) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InitializeMint2) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *InitializeMint2) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *InitializeMint2) GetMintAuthority() string {
	if x != nil {
		return x.MintAuthority
	}
	return ""
}

func (x *InitializeMint2) GetFreezeAuthority() string {
	if x != nil {
		return x.FreezeAuthority
	}
	return ""
}

func (x *InitializeMint2) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

type InitializeMultisig2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"` // we use the transaction's BlockTime here `GetTransactionResult.BlockTime`
	Id          []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxSignature string                 `protobuf:"bytes,3,opt,name=txSignature,proto3" json:"txSignature,omitempty"`
	M           uint32                 `protobuf:"varint,4,opt,name=m,proto3" json:"m,omitempty"`
	Account     string                 `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Signers     []string               `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *InitializeMultisig2) Reset() {
	*x = InitializeMultisig2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeMultisig2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeMultisig2) ProtoMessage() {}

func (x *InitializeMultisig2) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeMultisig2.ProtoReflect.Descriptor instead.
func (*InitializeMultisig2) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{20}
}

func (x *InitializeMultisig2) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *InitializeMultisig2) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InitializeMultisig2) GetTxSignature() string {
	if x != nil {
		return x.TxSignature
	}
	return ""
}

func (x *InitializeMultisig2) GetM() uint32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *InitializeMultisig2) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InitializeMultisig2) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type NFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address             string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Ts                  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
	MintAuthority       string                 `protobuf:"bytes,3,opt,name=mintAuthority,proto3" json:"mintAuthority,omitempty"`
	FreezeAuthority     string                 `protobuf:"bytes,4,opt,name=freezeAuthority,proto3" json:"freezeAuthority,omitempty"`
	UpdateAuthority     string                 `protobuf:"bytes,5,opt,name=updateAuthority,proto3" json:"updateAuthority,omitempty"` // the update authority for the Token Metadata
	PrimarySaleHappened bool                   `protobuf:"varint,6,opt,name=primarySaleHappened,proto3" json:"primarySaleHappened,omitempty"`
	Royalty             uint32                 `protobuf:"varint,7,opt,name=royalty,proto3" json:"royalty,omitempty"`
	Creators            []*Creator             `protobuf:"bytes,8,rep,name=creators,proto3" json:"creators,omitempty"`
	Name                string                 `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Symbol              string                 `protobuf:"bytes,10,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Uri                 string                 `protobuf:"bytes,11,opt,name=uri,proto3" json:"uri,omitempty"`
	Collection          string                 `protobuf:"bytes,12,opt,name=collection,proto3" json:"collection,omitempty"` // address of collection. many do not have this data
}

func (x *NFT) Reset() {
	*x = NFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFT) ProtoMessage() {}

func (x *NFT) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFT.ProtoReflect.Descriptor instead.
func (*NFT) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{21}
}

func (x *NFT) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NFT) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *NFT) GetMintAuthority() string {
	if x != nil {
		return x.MintAuthority
	}
	return ""
}

func (x *NFT) GetFreezeAuthority() string {
	if x != nil {
		return x.FreezeAuthority
	}
	return ""
}

func (x *NFT) GetUpdateAuthority() string {
	if x != nil {
		return x.UpdateAuthority
	}
	return ""
}

func (x *NFT) GetPrimarySaleHappened() bool {
	if x != nil {
		return x.PrimarySaleHappened
	}
	return false
}

func (x *NFT) GetRoyalty() uint32 {
	if x != nil {
		return x.Royalty
	}
	return 0
}

func (x *NFT) GetCreators() []*Creator {
	if x != nil {
		return x.Creators
	}
	return nil
}

func (x *NFT) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFT) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *NFT) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *NFT) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type Creator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Share    uint32 `protobuf:"varint,2,opt,name=share,proto3" json:"share,omitempty"` // share of the royalties
	Verified bool   `protobuf:"varint,3,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *Creator) Reset() {
	*x = Creator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Creator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Creator) ProtoMessage() {}

func (x *Creator) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Creator.ProtoReflect.Descriptor instead.
func (*Creator) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{22}
}

func (x *Creator) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Creator) GetShare() uint32 {
	if x != nil {
		return x.Share
	}
	return 0
}

func (x *Creator) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftAddress  string                 `protobuf:"bytes,1,opt,name=nftAddress,proto3" json:"nftAddress,omitempty"`
	Ts          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
	Transaction string                 `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Buyer       string                 `protobuf:"bytes,4,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Seller      string                 `protobuf:"bytes,5,opt,name=seller,proto3" json:"seller,omitempty"`
	Price       uint64                 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	SoldOn      string                 `protobuf:"bytes,7,opt,name=soldOn,proto3" json:"soldOn,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_source_solanatoken_token_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_source_solanatoken_token_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_connectors_source_solanatoken_token_proto_rawDescGZIP(), []int{23}
}

func (x *Trade) GetNftAddress() string {
	if x != nil {
		return x.NftAddress
	}
	return ""
}

func (x *Trade) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Trade) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *Trade) GetBuyer() string {
	if x != nil {
		return x.Buyer
	}
	return ""
}

func (x *Trade) GetSeller() string {
	if x != nil {
		return x.Seller
	}
	return ""
}

func (x *Trade) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetSoldOn() string {
	if x != nil {
		return x.SoldOn
	}
	return ""
}

var File_connectors_source_solanatoken_token_proto protoreflect.FileDescriptor

var file_connectors_source_solanatoken_token_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x08, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x56, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x56, 0x61, 0x72, 0x22, 0xd5, 0x01, 0x0a, 0x11,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x79, 0x73, 0x56, 0x61,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x79, 0x73,
	0x56, 0x61, 0x72, 0x22, 0xf4, 0x01, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x12, 0x2a,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69,
	0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x77,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73,
	0x22, 0xd8, 0x01, 0x0a, 0x04, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x07,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x73, 0x22, 0xae, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12,
	0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0c, 0x0a,
	0x01, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73,
	0x56, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x73, 0x56, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x22,
	0x8e, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd1, 0x01, 0x0a, 0x0b, 0x54, 0x68, 0x61, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x0e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x6f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x72, 0x6e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x56, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x56, 0x61, 0x72, 0x22, 0xb6,
	0x01, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x33, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x32, 0x12, 0x2a, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x32, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x73, 0x22, 0xa1, 0x03, 0x0a, 0x03, 0x4e, 0x46, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x48, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53,
	0x61, 0x6c, 0x65, 0x48, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xd1, 0x01, 0x0a,
	0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x66, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x66, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x6c, 0x64,
	0x4f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x64, 0x4f, 0x6e,
	0x42, 0x2c, 0x5a, 0x2a, 0x62, 0x6c, 0x65, 0x70, 0x2e, 0x61, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connectors_source_solanatoken_token_proto_rawDescOnce sync.Once
	file_connectors_source_solanatoken_token_proto_rawDescData = file_connectors_source_solanatoken_token_proto_rawDesc
)

func file_connectors_source_solanatoken_token_proto_rawDescGZIP() []byte {
	file_connectors_source_solanatoken_token_proto_rawDescOnce.Do(func() {
		file_connectors_source_solanatoken_token_proto_rawDescData = protoimpl.X.CompressGZIP(file_connectors_source_solanatoken_token_proto_rawDescData)
	})
	return file_connectors_source_solanatoken_token_proto_rawDescData
}

var file_connectors_source_solanatoken_token_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_connectors_source_solanatoken_token_proto_goTypes = []interface{}{
	(*Transfer)(nil),              // 0: solanatoken.Transfer
	(*InitializeMint)(nil),        // 1: solanatoken.InitializeMint
	(*InitializeAccount)(nil),     // 2: solanatoken.InitializeAccount
	(*MintTo)(nil),                // 3: solanatoken.MintTo
	(*SetAuthority)(nil),          // 4: solanatoken.SetAuthority
	(*CloseAccount)(nil),          // 5: solanatoken.CloseAccount
	(*Burn)(nil),                  // 6: solanatoken.Burn
	(*Approve)(nil),               // 7: solanatoken.Approve
	(*Revoke)(nil),                // 8: solanatoken.Revoke
	(*FreezeAccount)(nil),         // 9: solanatoken.FreezeAccount
	(*InitializeMultisig)(nil),    // 10: solanatoken.InitializeMultisig
	(*SyncNative)(nil),            // 11: solanatoken.SyncNative
	(*ThawAccount)(nil),           // 12: solanatoken.ThawAccount
	(*TransferChecked)(nil),       // 13: solanatoken.TransferChecked
	(*ApproveChecked)(nil),        // 14: solanatoken.ApproveChecked
	(*MintToChecked)(nil),         // 15: solanatoken.MintToChecked
	(*BurnChecked)(nil),           // 16: solanatoken.BurnChecked
	(*InitializeAccount2)(nil),    // 17: solanatoken.InitializeAccount2
	(*InitializeAccount3)(nil),    // 18: solanatoken.InitializeAccount3
	(*InitializeMint2)(nil),       // 19: solanatoken.InitializeMint2
	(*InitializeMultisig2)(nil),   // 20: solanatoken.InitializeMultisig2
	(*NFT)(nil),                   // 21: solanatoken.NFT
	(*Creator)(nil),               // 22: solanatoken.Creator
	(*Trade)(nil),                 // 23: solanatoken.Trade
	(*timestamppb.Timestamp)(nil), // 24: google.protobuf.Timestamp
}
var file_connectors_source_solanatoken_token_proto_depIdxs = []int32{
	24, // 0: solanatoken.Transfer.ts:type_name -> google.protobuf.Timestamp
	24, // 1: solanatoken.InitializeMint.ts:type_name -> google.protobuf.Timestamp
	24, // 2: solanatoken.InitializeAccount.ts:type_name -> google.protobuf.Timestamp
	24, // 3: solanatoken.MintTo.ts:type_name -> google.protobuf.Timestamp
	24, // 4: solanatoken.SetAuthority.ts:type_name -> google.protobuf.Timestamp
	24, // 5: solanatoken.CloseAccount.ts:type_name -> google.protobuf.Timestamp
	24, // 6: solanatoken.Burn.ts:type_name -> google.protobuf.Timestamp
	24, // 7: solanatoken.Approve.ts:type_name -> google.protobuf.Timestamp
	24, // 8: solanatoken.Revoke.ts:type_name -> google.protobuf.Timestamp
	24, // 9: solanatoken.FreezeAccount.ts:type_name -> google.protobuf.Timestamp
	24, // 10: solanatoken.InitializeMultisig.ts:type_name -> google.protobuf.Timestamp
	24, // 11: solanatoken.SyncNative.ts:type_name -> google.protobuf.Timestamp
	24, // 12: solanatoken.ThawAccount.ts:type_name -> google.protobuf.Timestamp
	24, // 13: solanatoken.TransferChecked.ts:type_name -> google.protobuf.Timestamp
	24, // 14: solanatoken.ApproveChecked.ts:type_name -> google.protobuf.Timestamp
	24, // 15: solanatoken.MintToChecked.ts:type_name -> google.protobuf.Timestamp
	24, // 16: solanatoken.BurnChecked.ts:type_name -> google.protobuf.Timestamp
	24, // 17: solanatoken.InitializeAccount2.ts:type_name -> google.protobuf.Timestamp
	24, // 18: solanatoken.InitializeAccount3.ts:type_name -> google.protobuf.Timestamp
	24, // 19: solanatoken.InitializeMint2.ts:type_name -> google.protobuf.Timestamp
	24, // 20: solanatoken.InitializeMultisig2.ts:type_name -> google.protobuf.Timestamp
	24, // 21: solanatoken.NFT.ts:type_name -> google.protobuf.Timestamp
	22, // 22: solanatoken.NFT.creators:type_name -> solanatoken.Creator
	24, // 23: solanatoken.Trade.ts:type_name -> google.protobuf.Timestamp
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_connectors_source_solanatoken_token_proto_init() }
func file_connectors_source_solanatoken_token_proto_init() {
	if File_connectors_source_solanatoken_token_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connectors_source_solanatoken_token_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeMint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Burn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Approve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Revoke); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreezeAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeMultisig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncNative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThawAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferChecked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveChecked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintToChecked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnChecked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeAccount2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeAccount3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeMint2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeMultisig2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Creator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_source_solanatoken_token_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connectors_source_solanatoken_token_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_connectors_source_solanatoken_token_proto_goTypes,
		DependencyIndexes: file_connectors_source_solanatoken_token_proto_depIdxs,
		MessageInfos:      file_connectors_source_solanatoken_token_proto_msgTypes,
	}.Build()
	File_connectors_source_solanatoken_token_proto = out.File
	file_connectors_source_solanatoken_token_proto_rawDesc = nil
	file_connectors_source_solanatoken_token_proto_goTypes = nil
	file_connectors_source_solanatoken_token_proto_depIdxs = nil
}
