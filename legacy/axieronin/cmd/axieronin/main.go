// Code generated by connectorgen - Edit as necessary.

package main

import (
	"context"

	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/rs/zerolog/log"

	"blep.ai/data/chain/ethereum/ethclient"
	"blep.ai/data/config"
	"blep.ai/data/connectors/source/axieronin"
	"blep.ai/data/monitor"
	"github.com/nakji-network/connector/kafkautils"
)

var conf = config.InitConfig()

func init() {
	kafkautils.TopicTypeRegistry.Load(axieronin.TopicTypes)
	conf.SetDefault("axieronin.kafka.topic.axienft_approval", ".fct.nakji.axieronin.0_0_0.axienft_approval")
	conf.SetDefault("axieronin.kafka.topic.axienft_approvalforall", ".fct.nakji.axieronin.0_0_0.axienft_approvalforall")
	conf.SetDefault("axieronin.kafka.topic.axienft_axieevolved", ".fct.nakji.axieronin.0_0_0.axienft_axieevolved")
	conf.SetDefault("axieronin.kafka.topic.axienft_axierebirthed", ".fct.nakji.axieronin.0_0_0.axienft_axierebirthed")
	conf.SetDefault("axieronin.kafka.topic.axienft_axieretired", ".fct.nakji.axieronin.0_0_0.axienft_axieretired")
	conf.SetDefault("axieronin.kafka.topic.axienft_axiespawned", ".fct.nakji.axieronin.0_0_0.axienft_axiespawned")
	conf.SetDefault("axieronin.kafka.topic.axienft_transfer", ".fct.nakji.axieronin.0_0_0.axienft_transfer")
	conf.SetDefault("axieronin.kafka.topic.axs_approval", ".fct.nakji.axieronin.0_0_0.axs_approval")
	conf.SetDefault("axieronin.kafka.topic.axs_transfer", ".fct.nakji.axieronin.0_0_0.axs_transfer")
	conf.SetDefault("axieronin.kafka.topic.clockauction_adminchanged", ".fct.nakji.axieronin.0_0_0.clockauction_adminchanged")
	conf.SetDefault("axieronin.kafka.topic.clockauction_adminremoved", ".fct.nakji.axieronin.0_0_0.clockauction_adminremoved")
	conf.SetDefault("axieronin.kafka.topic.clockauction_auctioncancelled", ".fct.nakji.axieronin.0_0_0.clockauction_auctioncancelled")
	conf.SetDefault("axieronin.kafka.topic.clockauction_auctioncreated", ".fct.nakji.axieronin.0_0_0.clockauction_auctioncreated")
	conf.SetDefault("axieronin.kafka.topic.clockauction_auctionsuccessful", ".fct.nakji.axieronin.0_0_0.clockauction_auctionsuccessful")
	conf.SetDefault("axieronin.kafka.topic.clockauction_paused", ".fct.nakji.axieronin.0_0_0.clockauction_paused")
	conf.SetDefault("axieronin.kafka.topic.clockauction_tokenauctioncancelled", ".fct.nakji.axieronin.0_0_0.clockauction_tokenauctioncancelled")
	conf.SetDefault("axieronin.kafka.topic.clockauction_unpaused", ".fct.nakji.axieronin.0_0_0.clockauction_unpaused")
	conf.SetDefault("axieronin.kafka.topic.land_adminchanged", ".fct.nakji.axieronin.0_0_0.land_adminchanged")
	conf.SetDefault("axieronin.kafka.topic.land_adminremoved", ".fct.nakji.axieronin.0_0_0.land_adminremoved")
	conf.SetDefault("axieronin.kafka.topic.land_approval", ".fct.nakji.axieronin.0_0_0.land_approval")
	conf.SetDefault("axieronin.kafka.topic.land_approvalforall", ".fct.nakji.axieronin.0_0_0.land_approvalforall")
	conf.SetDefault("axieronin.kafka.topic.land_minteradded", ".fct.nakji.axieronin.0_0_0.land_minteradded")
	conf.SetDefault("axieronin.kafka.topic.land_minterremoved", ".fct.nakji.axieronin.0_0_0.land_minterremoved")
	conf.SetDefault("axieronin.kafka.topic.land_nonceupdated", ".fct.nakji.axieronin.0_0_0.land_nonceupdated")
	conf.SetDefault("axieronin.kafka.topic.land_paused", ".fct.nakji.axieronin.0_0_0.land_paused")
	conf.SetDefault("axieronin.kafka.topic.land_spenderunwhitelisted", ".fct.nakji.axieronin.0_0_0.land_spenderunwhitelisted")
	conf.SetDefault("axieronin.kafka.topic.land_spenderwhitelisted", ".fct.nakji.axieronin.0_0_0.land_spenderwhitelisted")
	conf.SetDefault("axieronin.kafka.topic.land_transfer", ".fct.nakji.axieronin.0_0_0.land_transfer")
	conf.SetDefault("axieronin.kafka.topic.land_unpaused", ".fct.nakji.axieronin.0_0_0.land_unpaused")
	conf.SetDefault("axieronin.kafka.topic.landitem_adminchanged", ".fct.nakji.axieronin.0_0_0.landitem_adminchanged")
	conf.SetDefault("axieronin.kafka.topic.landitem_adminremoved", ".fct.nakji.axieronin.0_0_0.landitem_adminremoved")
	conf.SetDefault("axieronin.kafka.topic.landitem_approval", ".fct.nakji.axieronin.0_0_0.landitem_approval")
	conf.SetDefault("axieronin.kafka.topic.landitem_approvalforall", ".fct.nakji.axieronin.0_0_0.landitem_approvalforall")
	conf.SetDefault("axieronin.kafka.topic.landitem_minteradded", ".fct.nakji.axieronin.0_0_0.landitem_minteradded")
	conf.SetDefault("axieronin.kafka.topic.landitem_minterremoved", ".fct.nakji.axieronin.0_0_0.landitem_minterremoved")
	conf.SetDefault("axieronin.kafka.topic.landitem_nonceupdated", ".fct.nakji.axieronin.0_0_0.landitem_nonceupdated")
	conf.SetDefault("axieronin.kafka.topic.landitem_paused", ".fct.nakji.axieronin.0_0_0.landitem_paused")
	conf.SetDefault("axieronin.kafka.topic.landitem_spenderunwhitelisted", ".fct.nakji.axieronin.0_0_0.landitem_spenderunwhitelisted")
	conf.SetDefault("axieronin.kafka.topic.landitem_spenderwhitelisted", ".fct.nakji.axieronin.0_0_0.landitem_spenderwhitelisted")
	conf.SetDefault("axieronin.kafka.topic.landitem_transfer", ".fct.nakji.axieronin.0_0_0.landitem_transfer")
	conf.SetDefault("axieronin.kafka.topic.landitem_unpaused", ".fct.nakji.axieronin.0_0_0.landitem_unpaused")
	conf.SetDefault("axieronin.kafka.topic.roninweth_approval", ".fct.nakji.axieronin.0_0_0.roninweth_approval")
	conf.SetDefault("axieronin.kafka.topic.roninweth_minteradded", ".fct.nakji.axieronin.0_0_0.roninweth_minteradded")
	conf.SetDefault("axieronin.kafka.topic.roninweth_minterremoved", ".fct.nakji.axieronin.0_0_0.roninweth_minterremoved")
	conf.SetDefault("axieronin.kafka.topic.roninweth_transfer", ".fct.nakji.axieronin.0_0_0.roninweth_transfer")
	conf.SetDefault("axieronin.kafka.topic.slp_adminchanged", ".fct.nakji.axieronin.0_0_0.slp_adminchanged")
	conf.SetDefault("axieronin.kafka.topic.slp_adminremoved", ".fct.nakji.axieronin.0_0_0.slp_adminremoved")
	conf.SetDefault("axieronin.kafka.topic.slp_approval", ".fct.nakji.axieronin.0_0_0.slp_approval")
	conf.SetDefault("axieronin.kafka.topic.slp_minteradded", ".fct.nakji.axieronin.0_0_0.slp_minteradded")
	conf.SetDefault("axieronin.kafka.topic.slp_minterremoved", ".fct.nakji.axieronin.0_0_0.slp_minterremoved")
	conf.SetDefault("axieronin.kafka.topic.slp_transfer", ".fct.nakji.axieronin.0_0_0.slp_transfer")

	conf.SetDefault("axieronin.kafka.txID", "axieronin")

	conf.SetDefault("axieronin.axienftAddress", "0x32950db2a7164ae833121501c797d79e7b79d74c")
	conf.SetDefault("axieronin.axsAddress", "0x97a9107c1793bc407d6f527b77e7fff4d812bece")
	conf.SetDefault("axieronin.clockauctionAddress", "0x213073989821f738a7ba3520c3d31a1f9ad31bbd")
	conf.SetDefault("axieronin.landAddress", "0x8c811e3c958e190f5ec15fb376533a3398620500")
	conf.SetDefault("axieronin.landitemAddress", "0xa96660f0e4a3e9bc7388925d245a6d4d79e21259")
	conf.SetDefault("axieronin.roninwethAddress", "0xc99a6a985ed2cac1ef41640596c5a5f9f4e19ef5")
	conf.SetDefault("axieronin.slpAddress", "0xa8754b9fa15fc18bb59458815510e40a12cd2014")
}

func main() {
	kp, err := kafkautils.NewProducer(conf.GetString("kafka.url"), conf.GetString("axieronin.kafka.txID"))
	if err != nil {
		log.Fatal().Err(err).Msg("Failed to create new kafka producer")
	}

	urls := conf.GetStringSlice("ronin.rpc")
	log.Info().Strs("url", urls).Msg("connecting to Ethereum RPC")
	ethClientPool, err := ethclient.DialPoolContext(context.Background(), urls)
	if err != nil {
		log.Fatal().Err(err).Msg("Ethereum RPC connection error")
	}

	axienftAddress := ethcommon.HexToAddress(conf.GetString("axieronin.axienftAddress"))
	axsAddress := ethcommon.HexToAddress(conf.GetString("axieronin.axsAddress"))
	clockauctionAddress := ethcommon.HexToAddress(conf.GetString("axieronin.clockauctionAddress"))
	landAddress := ethcommon.HexToAddress(conf.GetString("axieronin.landAddress"))
	landitemAddress := ethcommon.HexToAddress(conf.GetString("axieronin.landitemAddress"))
	roninwethAddress := ethcommon.HexToAddress(conf.GetString("axieronin.roninwethAddress"))
	slpAddress := ethcommon.HexToAddress(conf.GetString("axieronin.slpAddress"))

	addresses := map[string][]ethcommon.Address{
		"axienft":      {axienftAddress},
		"axs":          {axsAddress},
		"clockauction": {clockauctionAddress},
		"land":         {landAddress},
		"landitem":     {landitemAddress},
		"roninweth":    {roninwethAddress},
		"slp":          {slpAddress},
	}

	topics := map[string]kafkautils.Topic{
		"axienft_approval":                   kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.axienft_approval"), conf.GetString("kafka.env")),
		"axienft_approvalforall":             kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.axienft_approvalforall"), conf.GetString("kafka.env")),
		"axienft_axieevolved":                kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.axienft_axieevolved"), conf.GetString("kafka.env")),
		"axienft_axierebirthed":              kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.axienft_axierebirthed"), conf.GetString("kafka.env")),
		"axienft_axieretired":                kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.axienft_axieretired"), conf.GetString("kafka.env")),
		"axienft_axiespawned":                kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.axienft_axiespawned"), conf.GetString("kafka.env")),
		"axienft_transfer":                   kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.axienft_transfer"), conf.GetString("kafka.env")),
		"axs_approval":                       kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.axs_approval"), conf.GetString("kafka.env")),
		"axs_transfer":                       kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.axs_transfer"), conf.GetString("kafka.env")),
		"clockauction_adminchanged":          kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.clockauction_adminchanged"), conf.GetString("kafka.env")),
		"clockauction_adminremoved":          kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.clockauction_adminremoved"), conf.GetString("kafka.env")),
		"clockauction_auctioncancelled":      kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.clockauction_auctioncancelled"), conf.GetString("kafka.env")),
		"clockauction_auctioncreated":        kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.clockauction_auctioncreated"), conf.GetString("kafka.env")),
		"clockauction_auctionsuccessful":     kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.clockauction_auctionsuccessful"), conf.GetString("kafka.env")),
		"clockauction_paused":                kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.clockauction_paused"), conf.GetString("kafka.env")),
		"clockauction_tokenauctioncancelled": kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.clockauction_tokenauctioncancelled"), conf.GetString("kafka.env")),
		"clockauction_unpaused":              kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.clockauction_unpaused"), conf.GetString("kafka.env")),
		"land_adminchanged":                  kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_adminchanged"), conf.GetString("kafka.env")),
		"land_adminremoved":                  kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_adminremoved"), conf.GetString("kafka.env")),
		"land_approval":                      kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_approval"), conf.GetString("kafka.env")),
		"land_approvalforall":                kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_approvalforall"), conf.GetString("kafka.env")),
		"land_minteradded":                   kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_minteradded"), conf.GetString("kafka.env")),
		"land_minterremoved":                 kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_minterremoved"), conf.GetString("kafka.env")),
		"land_nonceupdated":                  kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_nonceupdated"), conf.GetString("kafka.env")),
		"land_paused":                        kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_paused"), conf.GetString("kafka.env")),
		"land_spenderunwhitelisted":          kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_spenderunwhitelisted"), conf.GetString("kafka.env")),
		"land_spenderwhitelisted":            kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_spenderwhitelisted"), conf.GetString("kafka.env")),
		"land_transfer":                      kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_transfer"), conf.GetString("kafka.env")),
		"land_unpaused":                      kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.land_unpaused"), conf.GetString("kafka.env")),
		"landitem_adminchanged":              kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_adminchanged"), conf.GetString("kafka.env")),
		"landitem_adminremoved":              kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_adminremoved"), conf.GetString("kafka.env")),
		"landitem_approval":                  kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_approval"), conf.GetString("kafka.env")),
		"landitem_approvalforall":            kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_approvalforall"), conf.GetString("kafka.env")),
		"landitem_minteradded":               kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_minteradded"), conf.GetString("kafka.env")),
		"landitem_minterremoved":             kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_minterremoved"), conf.GetString("kafka.env")),
		"landitem_nonceupdated":              kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_nonceupdated"), conf.GetString("kafka.env")),
		"landitem_paused":                    kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_paused"), conf.GetString("kafka.env")),
		"landitem_spenderunwhitelisted":      kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_spenderunwhitelisted"), conf.GetString("kafka.env")),
		"landitem_spenderwhitelisted":        kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_spenderwhitelisted"), conf.GetString("kafka.env")),
		"landitem_transfer":                  kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_transfer"), conf.GetString("kafka.env")),
		"landitem_unpaused":                  kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.landitem_unpaused"), conf.GetString("kafka.env")),
		"roninweth_approval":                 kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.roninweth_approval"), conf.GetString("kafka.env")),
		"roninweth_minteradded":              kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.roninweth_minteradded"), conf.GetString("kafka.env")),
		"roninweth_minterremoved":            kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.roninweth_minterremoved"), conf.GetString("kafka.env")),
		"roninweth_transfer":                 kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.roninweth_transfer"), conf.GetString("kafka.env")),
		"slp_adminchanged":                   kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.slp_adminchanged"), conf.GetString("kafka.env")),
		"slp_adminremoved":                   kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.slp_adminremoved"), conf.GetString("kafka.env")),
		"slp_approval":                       kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.slp_approval"), conf.GetString("kafka.env")),
		"slp_minteradded":                    kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.slp_minteradded"), conf.GetString("kafka.env")),
		"slp_minterremoved":                  kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.slp_minterremoved"), conf.GetString("kafka.env")),
		"slp_transfer":                       kafkautils.MustParseTopic(conf.GetString("axieronin.kafka.topic.slp_transfer"), conf.GetString("kafka.env")),
	}

	connector := axieronin.NewConnector(
		kp,
		addresses,
		topics,
		ethClientPool,
	)

	monitor.StartMonitor("axieronin")
	connector.Start(context.Background(), conf.GetUint64("axieronin.backfillNumBlocks"))
}
