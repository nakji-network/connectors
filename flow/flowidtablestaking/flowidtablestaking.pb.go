// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: flowidtablestaking.proto

package flowidtablestaking

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts                *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber       uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID              []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex          uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	TotalStaked       float64                `protobuf:"fixed64,5,opt,name=totalStaked,proto3" json:"totalStaked,omitempty"`
	TotalRewardPayout float64                `protobuf:"fixed64,6,opt,name=totalRewardPayout,proto3" json:"totalRewardPayout,omitempty"`
}

func (x *NewEpoch) Reset() {
	*x = NewEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEpoch) ProtoMessage() {}

func (x *NewEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEpoch.ProtoReflect.Descriptor instead.
func (*NewEpoch) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{0}
}

func (x *NewEpoch) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *NewEpoch) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *NewEpoch) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *NewEpoch) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *NewEpoch) GetTotalStaked() float64 {
	if x != nil {
		return x.TotalStaked
	}
	return 0
}

func (x *NewEpoch) GetTotalRewardPayout() float64 {
	if x != nil {
		return x.TotalRewardPayout
	}
	return 0
}

type EpochTotalRewardsPaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	Total       float64                `protobuf:"fixed64,5,opt,name=total,proto3" json:"total,omitempty"`
	FromFees    float64                `protobuf:"fixed64,6,opt,name=fromFees,proto3" json:"fromFees,omitempty"`
	Minted      float64                `protobuf:"fixed64,7,opt,name=minted,proto3" json:"minted,omitempty"`
	FeesBurned  float64                `protobuf:"fixed64,8,opt,name=feesBurned,proto3" json:"feesBurned,omitempty"`
}

func (x *EpochTotalRewardsPaid) Reset() {
	*x = EpochTotalRewardsPaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochTotalRewardsPaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochTotalRewardsPaid) ProtoMessage() {}

func (x *EpochTotalRewardsPaid) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochTotalRewardsPaid.ProtoReflect.Descriptor instead.
func (*EpochTotalRewardsPaid) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{1}
}

func (x *EpochTotalRewardsPaid) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *EpochTotalRewardsPaid) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EpochTotalRewardsPaid) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *EpochTotalRewardsPaid) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *EpochTotalRewardsPaid) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *EpochTotalRewardsPaid) GetFromFees() float64 {
	if x != nil {
		return x.FromFees
	}
	return 0
}

func (x *EpochTotalRewardsPaid) GetMinted() float64 {
	if x != nil {
		return x.Minted
	}
	return 0
}

func (x *EpochTotalRewardsPaid) GetFeesBurned() float64 {
	if x != nil {
		return x.FeesBurned
	}
	return 0
}

type NewNodeCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber     uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID            []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex        uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID          string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Role            uint32                 `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
	AmountCommitted float64                `protobuf:"fixed64,7,opt,name=amountCommitted,proto3" json:"amountCommitted,omitempty"`
}

func (x *NewNodeCreated) Reset() {
	*x = NewNodeCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewNodeCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewNodeCreated) ProtoMessage() {}

func (x *NewNodeCreated) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewNodeCreated.ProtoReflect.Descriptor instead.
func (*NewNodeCreated) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{2}
}

func (x *NewNodeCreated) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *NewNodeCreated) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *NewNodeCreated) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *NewNodeCreated) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *NewNodeCreated) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NewNodeCreated) GetRole() uint32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *NewNodeCreated) GetAmountCommitted() float64 {
	if x != nil {
		return x.AmountCommitted
	}
	return 0
}

type TokensCommitted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Amount      float64                `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TokensCommitted) Reset() {
	*x = TokensCommitted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensCommitted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensCommitted) ProtoMessage() {}

func (x *TokensCommitted) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensCommitted.ProtoReflect.Descriptor instead.
func (*TokensCommitted) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{3}
}

func (x *TokensCommitted) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *TokensCommitted) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TokensCommitted) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *TokensCommitted) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *TokensCommitted) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *TokensCommitted) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TokensStaked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Amount      float64                `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TokensStaked) Reset() {
	*x = TokensStaked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensStaked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensStaked) ProtoMessage() {}

func (x *TokensStaked) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensStaked.ProtoReflect.Descriptor instead.
func (*TokensStaked) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{4}
}

func (x *TokensStaked) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *TokensStaked) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TokensStaked) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *TokensStaked) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *TokensStaked) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *TokensStaked) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TokensUnstaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Amount      float64                `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TokensUnstaking) Reset() {
	*x = TokensUnstaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensUnstaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensUnstaking) ProtoMessage() {}

func (x *TokensUnstaking) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensUnstaking.ProtoReflect.Descriptor instead.
func (*TokensUnstaking) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{5}
}

func (x *TokensUnstaking) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *TokensUnstaking) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TokensUnstaking) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *TokensUnstaking) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *TokensUnstaking) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *TokensUnstaking) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TokensUnstaked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Amount      float64                `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TokensUnstaked) Reset() {
	*x = TokensUnstaked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensUnstaked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensUnstaked) ProtoMessage() {}

func (x *TokensUnstaked) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensUnstaked.ProtoReflect.Descriptor instead.
func (*TokensUnstaked) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{6}
}

func (x *TokensUnstaked) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *TokensUnstaked) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TokensUnstaked) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *TokensUnstaked) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *TokensUnstaked) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *TokensUnstaked) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type NodeRemovedAndRefunded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Amount      float64                `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *NodeRemovedAndRefunded) Reset() {
	*x = NodeRemovedAndRefunded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRemovedAndRefunded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRemovedAndRefunded) ProtoMessage() {}

func (x *NodeRemovedAndRefunded) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRemovedAndRefunded.ProtoReflect.Descriptor instead.
func (*NodeRemovedAndRefunded) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{7}
}

func (x *NodeRemovedAndRefunded) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *NodeRemovedAndRefunded) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *NodeRemovedAndRefunded) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *NodeRemovedAndRefunded) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *NodeRemovedAndRefunded) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeRemovedAndRefunded) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type RewardsPaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Amount      float64                `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RewardsPaid) Reset() {
	*x = RewardsPaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardsPaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardsPaid) ProtoMessage() {}

func (x *RewardsPaid) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardsPaid.ProtoReflect.Descriptor instead.
func (*RewardsPaid) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{8}
}

func (x *RewardsPaid) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *RewardsPaid) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *RewardsPaid) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *RewardsPaid) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *RewardsPaid) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *RewardsPaid) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type UnstakedTokensWithdrawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Amount      float64                `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UnstakedTokensWithdrawn) Reset() {
	*x = UnstakedTokensWithdrawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstakedTokensWithdrawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstakedTokensWithdrawn) ProtoMessage() {}

func (x *UnstakedTokensWithdrawn) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstakedTokensWithdrawn.ProtoReflect.Descriptor instead.
func (*UnstakedTokensWithdrawn) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{9}
}

func (x *UnstakedTokensWithdrawn) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *UnstakedTokensWithdrawn) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *UnstakedTokensWithdrawn) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *UnstakedTokensWithdrawn) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *UnstakedTokensWithdrawn) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *UnstakedTokensWithdrawn) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type RewardTokensWithdrawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Amount      float64                `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RewardTokensWithdrawn) Reset() {
	*x = RewardTokensWithdrawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardTokensWithdrawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardTokensWithdrawn) ProtoMessage() {}

func (x *RewardTokensWithdrawn) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardTokensWithdrawn.ProtoReflect.Descriptor instead.
func (*RewardTokensWithdrawn) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{10}
}

func (x *RewardTokensWithdrawn) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *RewardTokensWithdrawn) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *RewardTokensWithdrawn) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *RewardTokensWithdrawn) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *RewardTokensWithdrawn) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *RewardTokensWithdrawn) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type NetworkingAddressUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NewAddress  string                 `protobuf:"bytes,6,opt,name=newAddress,proto3" json:"newAddress,omitempty"`
}

func (x *NetworkingAddressUpdated) Reset() {
	*x = NetworkingAddressUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkingAddressUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkingAddressUpdated) ProtoMessage() {}

func (x *NetworkingAddressUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkingAddressUpdated.ProtoReflect.Descriptor instead.
func (*NetworkingAddressUpdated) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{11}
}

func (x *NetworkingAddressUpdated) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *NetworkingAddressUpdated) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *NetworkingAddressUpdated) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *NetworkingAddressUpdated) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *NetworkingAddressUpdated) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NetworkingAddressUpdated) GetNewAddress() string {
	if x != nil {
		return x.NewAddress
	}
	return ""
}

type NewDelegatorCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DelegatorID uint32                 `protobuf:"varint,6,opt,name=delegatorID,proto3" json:"delegatorID,omitempty"`
}

func (x *NewDelegatorCreated) Reset() {
	*x = NewDelegatorCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDelegatorCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDelegatorCreated) ProtoMessage() {}

func (x *NewDelegatorCreated) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDelegatorCreated.ProtoReflect.Descriptor instead.
func (*NewDelegatorCreated) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{12}
}

func (x *NewDelegatorCreated) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *NewDelegatorCreated) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *NewDelegatorCreated) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *NewDelegatorCreated) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *NewDelegatorCreated) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NewDelegatorCreated) GetDelegatorID() uint32 {
	if x != nil {
		return x.DelegatorID
	}
	return 0
}

type DelegatorTokensCommitted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DelegatorID uint32                 `protobuf:"varint,6,opt,name=delegatorID,proto3" json:"delegatorID,omitempty"`
	Amount      float64                `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DelegatorTokensCommitted) Reset() {
	*x = DelegatorTokensCommitted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorTokensCommitted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorTokensCommitted) ProtoMessage() {}

func (x *DelegatorTokensCommitted) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorTokensCommitted.ProtoReflect.Descriptor instead.
func (*DelegatorTokensCommitted) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{13}
}

func (x *DelegatorTokensCommitted) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *DelegatorTokensCommitted) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DelegatorTokensCommitted) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *DelegatorTokensCommitted) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *DelegatorTokensCommitted) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *DelegatorTokensCommitted) GetDelegatorID() uint32 {
	if x != nil {
		return x.DelegatorID
	}
	return 0
}

func (x *DelegatorTokensCommitted) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DelegatorTokensStaked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DelegatorID uint32                 `protobuf:"varint,6,opt,name=delegatorID,proto3" json:"delegatorID,omitempty"`
	Amount      float64                `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DelegatorTokensStaked) Reset() {
	*x = DelegatorTokensStaked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorTokensStaked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorTokensStaked) ProtoMessage() {}

func (x *DelegatorTokensStaked) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorTokensStaked.ProtoReflect.Descriptor instead.
func (*DelegatorTokensStaked) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{14}
}

func (x *DelegatorTokensStaked) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *DelegatorTokensStaked) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DelegatorTokensStaked) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *DelegatorTokensStaked) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *DelegatorTokensStaked) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *DelegatorTokensStaked) GetDelegatorID() uint32 {
	if x != nil {
		return x.DelegatorID
	}
	return 0
}

func (x *DelegatorTokensStaked) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DelegatorTokensUnstaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DelegatorID uint32                 `protobuf:"varint,6,opt,name=delegatorID,proto3" json:"delegatorID,omitempty"`
	Amount      float64                `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DelegatorTokensUnstaking) Reset() {
	*x = DelegatorTokensUnstaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorTokensUnstaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorTokensUnstaking) ProtoMessage() {}

func (x *DelegatorTokensUnstaking) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorTokensUnstaking.ProtoReflect.Descriptor instead.
func (*DelegatorTokensUnstaking) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{15}
}

func (x *DelegatorTokensUnstaking) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *DelegatorTokensUnstaking) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DelegatorTokensUnstaking) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *DelegatorTokensUnstaking) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *DelegatorTokensUnstaking) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *DelegatorTokensUnstaking) GetDelegatorID() uint32 {
	if x != nil {
		return x.DelegatorID
	}
	return 0
}

func (x *DelegatorTokensUnstaking) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DelegatorTokensUnstaked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DelegatorID uint32                 `protobuf:"varint,6,opt,name=delegatorID,proto3" json:"delegatorID,omitempty"`
	Amount      float64                `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DelegatorTokensUnstaked) Reset() {
	*x = DelegatorTokensUnstaked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorTokensUnstaked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorTokensUnstaked) ProtoMessage() {}

func (x *DelegatorTokensUnstaked) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorTokensUnstaked.ProtoReflect.Descriptor instead.
func (*DelegatorTokensUnstaked) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{16}
}

func (x *DelegatorTokensUnstaked) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *DelegatorTokensUnstaked) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DelegatorTokensUnstaked) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *DelegatorTokensUnstaked) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *DelegatorTokensUnstaked) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *DelegatorTokensUnstaked) GetDelegatorID() uint32 {
	if x != nil {
		return x.DelegatorID
	}
	return 0
}

func (x *DelegatorTokensUnstaked) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DelegatorRewardsPaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DelegatorID uint32                 `protobuf:"varint,6,opt,name=delegatorID,proto3" json:"delegatorID,omitempty"`
	Amount      float64                `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DelegatorRewardsPaid) Reset() {
	*x = DelegatorRewardsPaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorRewardsPaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorRewardsPaid) ProtoMessage() {}

func (x *DelegatorRewardsPaid) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorRewardsPaid.ProtoReflect.Descriptor instead.
func (*DelegatorRewardsPaid) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{17}
}

func (x *DelegatorRewardsPaid) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *DelegatorRewardsPaid) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DelegatorRewardsPaid) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *DelegatorRewardsPaid) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *DelegatorRewardsPaid) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *DelegatorRewardsPaid) GetDelegatorID() uint32 {
	if x != nil {
		return x.DelegatorID
	}
	return 0
}

func (x *DelegatorRewardsPaid) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DelegatorUnstakedTokensWithdrawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DelegatorID uint32                 `protobuf:"varint,6,opt,name=delegatorID,proto3" json:"delegatorID,omitempty"`
	Amount      float64                `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DelegatorUnstakedTokensWithdrawn) Reset() {
	*x = DelegatorUnstakedTokensWithdrawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorUnstakedTokensWithdrawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorUnstakedTokensWithdrawn) ProtoMessage() {}

func (x *DelegatorUnstakedTokensWithdrawn) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorUnstakedTokensWithdrawn.ProtoReflect.Descriptor instead.
func (*DelegatorUnstakedTokensWithdrawn) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{18}
}

func (x *DelegatorUnstakedTokensWithdrawn) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *DelegatorUnstakedTokensWithdrawn) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DelegatorUnstakedTokensWithdrawn) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *DelegatorUnstakedTokensWithdrawn) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *DelegatorUnstakedTokensWithdrawn) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *DelegatorUnstakedTokensWithdrawn) GetDelegatorID() uint32 {
	if x != nil {
		return x.DelegatorID
	}
	return 0
}

func (x *DelegatorUnstakedTokensWithdrawn) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DelegatorRewardTokensWithdrawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NodeID      string                 `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DelegatorID uint32                 `protobuf:"varint,6,opt,name=delegatorID,proto3" json:"delegatorID,omitempty"`
	Amount      float64                `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DelegatorRewardTokensWithdrawn) Reset() {
	*x = DelegatorRewardTokensWithdrawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorRewardTokensWithdrawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorRewardTokensWithdrawn) ProtoMessage() {}

func (x *DelegatorRewardTokensWithdrawn) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorRewardTokensWithdrawn.ProtoReflect.Descriptor instead.
func (*DelegatorRewardTokensWithdrawn) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{19}
}

func (x *DelegatorRewardTokensWithdrawn) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *DelegatorRewardTokensWithdrawn) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DelegatorRewardTokensWithdrawn) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *DelegatorRewardTokensWithdrawn) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *DelegatorRewardTokensWithdrawn) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *DelegatorRewardTokensWithdrawn) GetDelegatorID() uint32 {
	if x != nil {
		return x.DelegatorID
	}
	return 0
}

func (x *DelegatorRewardTokensWithdrawn) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type NewDelegatorCutPercentage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts               *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber      uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID             []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex         uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NewCutPercentage float64                `protobuf:"fixed64,5,opt,name=newCutPercentage,proto3" json:"newCutPercentage,omitempty"`
}

func (x *NewDelegatorCutPercentage) Reset() {
	*x = NewDelegatorCutPercentage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDelegatorCutPercentage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDelegatorCutPercentage) ProtoMessage() {}

func (x *NewDelegatorCutPercentage) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDelegatorCutPercentage.ProtoReflect.Descriptor instead.
func (*NewDelegatorCutPercentage) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{20}
}

func (x *NewDelegatorCutPercentage) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *NewDelegatorCutPercentage) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *NewDelegatorCutPercentage) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *NewDelegatorCutPercentage) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *NewDelegatorCutPercentage) GetNewCutPercentage() float64 {
	if x != nil {
		return x.NewCutPercentage
	}
	return 0
}

type NewWeeklyPayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NewPayout   float64                `protobuf:"fixed64,5,opt,name=newPayout,proto3" json:"newPayout,omitempty"`
}

func (x *NewWeeklyPayout) Reset() {
	*x = NewWeeklyPayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewWeeklyPayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewWeeklyPayout) ProtoMessage() {}

func (x *NewWeeklyPayout) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewWeeklyPayout.ProtoReflect.Descriptor instead.
func (*NewWeeklyPayout) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{21}
}

func (x *NewWeeklyPayout) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *NewWeeklyPayout) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *NewWeeklyPayout) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *NewWeeklyPayout) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *NewWeeklyPayout) GetNewPayout() float64 {
	if x != nil {
		return x.NewPayout
	}
	return 0
}

type NewStakingMinimums struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxID        []byte                 `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	NewMinimums map[uint32]float64     `protobuf:"bytes,5,rep,name=newMinimums,proto3" json:"newMinimums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *NewStakingMinimums) Reset() {
	*x = NewStakingMinimums{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowidtablestaking_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStakingMinimums) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStakingMinimums) ProtoMessage() {}

func (x *NewStakingMinimums) ProtoReflect() protoreflect.Message {
	mi := &file_flowidtablestaking_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStakingMinimums.ProtoReflect.Descriptor instead.
func (*NewStakingMinimums) Descriptor() ([]byte, []int) {
	return file_flowidtablestaking_proto_rawDescGZIP(), []int{22}
}

func (x *NewStakingMinimums) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *NewStakingMinimums) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *NewStakingMinimums) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *NewStakingMinimums) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *NewStakingMinimums) GetNewMinimums() map[uint32]float64 {
	if x != nil {
		return x.NewMinimums
	}
	return nil
}

var File_flowidtablestaking_proto protoreflect.FileDescriptor

var file_flowidtablestaking_proto_rawDesc = []byte{
	0x0a, 0x18, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x64, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x66, 0x6c, 0x6f, 0x77,
	0x69, 0x64, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd8, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x15, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x50, 0x61, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x46, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x65, 0x65, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x66, 0x65, 0x65, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x22, 0xe4, 0x01, 0x0a,
	0x0e, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x55,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc7,
	0x01, 0x0a, 0x17, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd0, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x22, 0xea, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xe7, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x55, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x55, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf2, 0x01, 0x0a,
	0x20, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74,
	0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xf0, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x19, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x43,
	0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xad, 0x01, 0x0a,
	0x0f, 0x4e, 0x65, 0x77, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0xad, 0x02, 0x0a,
	0x12, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x59, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x64, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x73, 0x2e, 0x4e,
	0x65, 0x77, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x73, 0x1a, 0x3e, 0x0a, 0x10,
	0x4e, 0x65, 0x77, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x6b, 0x6a, 0x69,
	0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x64, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_flowidtablestaking_proto_rawDescOnce sync.Once
	file_flowidtablestaking_proto_rawDescData = file_flowidtablestaking_proto_rawDesc
)

func file_flowidtablestaking_proto_rawDescGZIP() []byte {
	file_flowidtablestaking_proto_rawDescOnce.Do(func() {
		file_flowidtablestaking_proto_rawDescData = protoimpl.X.CompressGZIP(file_flowidtablestaking_proto_rawDescData)
	})
	return file_flowidtablestaking_proto_rawDescData
}

var file_flowidtablestaking_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_flowidtablestaking_proto_goTypes = []interface{}{
	(*NewEpoch)(nil),                         // 0: flowidtablestaking.NewEpoch
	(*EpochTotalRewardsPaid)(nil),            // 1: flowidtablestaking.EpochTotalRewardsPaid
	(*NewNodeCreated)(nil),                   // 2: flowidtablestaking.NewNodeCreated
	(*TokensCommitted)(nil),                  // 3: flowidtablestaking.TokensCommitted
	(*TokensStaked)(nil),                     // 4: flowidtablestaking.TokensStaked
	(*TokensUnstaking)(nil),                  // 5: flowidtablestaking.TokensUnstaking
	(*TokensUnstaked)(nil),                   // 6: flowidtablestaking.TokensUnstaked
	(*NodeRemovedAndRefunded)(nil),           // 7: flowidtablestaking.NodeRemovedAndRefunded
	(*RewardsPaid)(nil),                      // 8: flowidtablestaking.RewardsPaid
	(*UnstakedTokensWithdrawn)(nil),          // 9: flowidtablestaking.UnstakedTokensWithdrawn
	(*RewardTokensWithdrawn)(nil),            // 10: flowidtablestaking.RewardTokensWithdrawn
	(*NetworkingAddressUpdated)(nil),         // 11: flowidtablestaking.NetworkingAddressUpdated
	(*NewDelegatorCreated)(nil),              // 12: flowidtablestaking.NewDelegatorCreated
	(*DelegatorTokensCommitted)(nil),         // 13: flowidtablestaking.DelegatorTokensCommitted
	(*DelegatorTokensStaked)(nil),            // 14: flowidtablestaking.DelegatorTokensStaked
	(*DelegatorTokensUnstaking)(nil),         // 15: flowidtablestaking.DelegatorTokensUnstaking
	(*DelegatorTokensUnstaked)(nil),          // 16: flowidtablestaking.DelegatorTokensUnstaked
	(*DelegatorRewardsPaid)(nil),             // 17: flowidtablestaking.DelegatorRewardsPaid
	(*DelegatorUnstakedTokensWithdrawn)(nil), // 18: flowidtablestaking.DelegatorUnstakedTokensWithdrawn
	(*DelegatorRewardTokensWithdrawn)(nil),   // 19: flowidtablestaking.DelegatorRewardTokensWithdrawn
	(*NewDelegatorCutPercentage)(nil),        // 20: flowidtablestaking.NewDelegatorCutPercentage
	(*NewWeeklyPayout)(nil),                  // 21: flowidtablestaking.NewWeeklyPayout
	(*NewStakingMinimums)(nil),               // 22: flowidtablestaking.NewStakingMinimums
	nil,                                      // 23: flowidtablestaking.NewStakingMinimums.NewMinimumsEntry
	(*timestamppb.Timestamp)(nil),            // 24: google.protobuf.Timestamp
}
var file_flowidtablestaking_proto_depIdxs = []int32{
	24, // 0: flowidtablestaking.NewEpoch.ts:type_name -> google.protobuf.Timestamp
	24, // 1: flowidtablestaking.EpochTotalRewardsPaid.ts:type_name -> google.protobuf.Timestamp
	24, // 2: flowidtablestaking.NewNodeCreated.ts:type_name -> google.protobuf.Timestamp
	24, // 3: flowidtablestaking.TokensCommitted.ts:type_name -> google.protobuf.Timestamp
	24, // 4: flowidtablestaking.TokensStaked.ts:type_name -> google.protobuf.Timestamp
	24, // 5: flowidtablestaking.TokensUnstaking.ts:type_name -> google.protobuf.Timestamp
	24, // 6: flowidtablestaking.TokensUnstaked.ts:type_name -> google.protobuf.Timestamp
	24, // 7: flowidtablestaking.NodeRemovedAndRefunded.ts:type_name -> google.protobuf.Timestamp
	24, // 8: flowidtablestaking.RewardsPaid.ts:type_name -> google.protobuf.Timestamp
	24, // 9: flowidtablestaking.UnstakedTokensWithdrawn.ts:type_name -> google.protobuf.Timestamp
	24, // 10: flowidtablestaking.RewardTokensWithdrawn.ts:type_name -> google.protobuf.Timestamp
	24, // 11: flowidtablestaking.NetworkingAddressUpdated.ts:type_name -> google.protobuf.Timestamp
	24, // 12: flowidtablestaking.NewDelegatorCreated.ts:type_name -> google.protobuf.Timestamp
	24, // 13: flowidtablestaking.DelegatorTokensCommitted.ts:type_name -> google.protobuf.Timestamp
	24, // 14: flowidtablestaking.DelegatorTokensStaked.ts:type_name -> google.protobuf.Timestamp
	24, // 15: flowidtablestaking.DelegatorTokensUnstaking.ts:type_name -> google.protobuf.Timestamp
	24, // 16: flowidtablestaking.DelegatorTokensUnstaked.ts:type_name -> google.protobuf.Timestamp
	24, // 17: flowidtablestaking.DelegatorRewardsPaid.ts:type_name -> google.protobuf.Timestamp
	24, // 18: flowidtablestaking.DelegatorUnstakedTokensWithdrawn.ts:type_name -> google.protobuf.Timestamp
	24, // 19: flowidtablestaking.DelegatorRewardTokensWithdrawn.ts:type_name -> google.protobuf.Timestamp
	24, // 20: flowidtablestaking.NewDelegatorCutPercentage.ts:type_name -> google.protobuf.Timestamp
	24, // 21: flowidtablestaking.NewWeeklyPayout.ts:type_name -> google.protobuf.Timestamp
	24, // 22: flowidtablestaking.NewStakingMinimums.ts:type_name -> google.protobuf.Timestamp
	23, // 23: flowidtablestaking.NewStakingMinimums.newMinimums:type_name -> flowidtablestaking.NewStakingMinimums.NewMinimumsEntry
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_flowidtablestaking_proto_init() }
func file_flowidtablestaking_proto_init() {
	if File_flowidtablestaking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flowidtablestaking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochTotalRewardsPaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewNodeCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensCommitted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensStaked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensUnstaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensUnstaked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRemovedAndRefunded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardsPaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstakedTokensWithdrawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardTokensWithdrawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkingAddressUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDelegatorCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorTokensCommitted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorTokensStaked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorTokensUnstaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorTokensUnstaked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorRewardsPaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorUnstakedTokensWithdrawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorRewardTokensWithdrawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDelegatorCutPercentage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewWeeklyPayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowidtablestaking_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewStakingMinimums); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flowidtablestaking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flowidtablestaking_proto_goTypes,
		DependencyIndexes: file_flowidtablestaking_proto_depIdxs,
		MessageInfos:      file_flowidtablestaking_proto_msgTypes,
	}.Build()
	File_flowidtablestaking_proto = out.File
	file_flowidtablestaking_proto_rawDesc = nil
	file_flowidtablestaking_proto_goTypes = nil
	file_flowidtablestaking_proto_depIdxs = nil
}
